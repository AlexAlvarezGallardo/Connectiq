// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace ConnectiqApiNS
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomerResult : global::System.IEquatable<CreateCustomerResult>, ICreateCustomerResult
    {
        public CreateCustomerResult(global::ConnectiqApiNS.ICreateCustomer_CreateCustomer createCustomer)
        {
            CreateCustomer = createCustomer;
        }

        public global::ConnectiqApiNS.ICreateCustomer_CreateCustomer CreateCustomer { get; }

        public virtual global::System.Boolean Equals(CreateCustomerResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CreateCustomer.Equals(other.CreateCustomer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCustomerResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CreateCustomer.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomer_CreateCustomer_MutationResponseOfCustomerValidated : global::System.IEquatable<CreateCustomer_CreateCustomer_MutationResponseOfCustomerValidated>, ICreateCustomer_CreateCustomer_MutationResponseOfCustomerValidated
    {
        public CreateCustomer_CreateCustomer_MutationResponseOfCustomerValidated(global::System.String message, global::ConnectiqApiNS.HttpStatusCode statusCode, global::System.Boolean success, global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Errors> errors, global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data? data)
        {
            Message = message;
            StatusCode = statusCode;
            Success = success;
            Errors = errors;
            Data = data;
        }

        public global::System.String Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode StatusCode { get; }
        public global::System.Boolean Success { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Errors> Errors { get; }
        /// <summary>
        /// The validated customer data.
        /// </summary>
        public global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data? Data { get; }

        public virtual global::System.Boolean Equals(CreateCustomer_CreateCustomer_MutationResponseOfCustomerValidated? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Message.Equals(other.Message)) && StatusCode.Equals(other.StatusCode) && global::System.Object.Equals(Success, other.Success) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Errors, other.Errors) && ((Data is null && other.Data is null) || Data != null && Data.Equals(other.Data));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCustomer_CreateCustomer_MutationResponseOfCustomerValidated)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Message.GetHashCode();
                hash ^= 397 * StatusCode.GetHashCode();
                hash ^= 397 * Success.GetHashCode();
                foreach (var Errors_elm in Errors)
                {
                    hash ^= 397 * Errors_elm.GetHashCode();
                }

                if (Data != null)
                {
                    hash ^= 397 * Data.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomer_CreateCustomer_Errors_ValidationFailure : global::System.IEquatable<CreateCustomer_CreateCustomer_Errors_ValidationFailure>, ICreateCustomer_CreateCustomer_Errors_ValidationFailure
    {
        public CreateCustomer_CreateCustomer_Errors_ValidationFailure(global::System.String? errorCode, global::System.String? propertyName, global::ConnectiqApiNS.Severity severity, global::System.String? errorMessage)
        {
            ErrorCode = errorCode;
            PropertyName = propertyName;
            Severity = severity;
            ErrorMessage = errorMessage;
        }

        public global::System.String? ErrorCode { get; }
        public global::System.String? PropertyName { get; }
        public global::ConnectiqApiNS.Severity Severity { get; }
        public global::System.String? ErrorMessage { get; }

        public virtual global::System.Boolean Equals(CreateCustomer_CreateCustomer_Errors_ValidationFailure? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ErrorCode is null && other.ErrorCode is null) || ErrorCode != null && ErrorCode.Equals(other.ErrorCode))) && ((PropertyName is null && other.PropertyName is null) || PropertyName != null && PropertyName.Equals(other.PropertyName)) && Severity.Equals(other.Severity) && ((ErrorMessage is null && other.ErrorMessage is null) || ErrorMessage != null && ErrorMessage.Equals(other.ErrorMessage));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCustomer_CreateCustomer_Errors_ValidationFailure)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErrorCode != null)
                {
                    hash ^= 397 * ErrorCode.GetHashCode();
                }

                if (PropertyName != null)
                {
                    hash ^= 397 * PropertyName.GetHashCode();
                }

                hash ^= 397 * Severity.GetHashCode();
                if (ErrorMessage != null)
                {
                    hash ^= 397 * ErrorMessage.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomer_CreateCustomer_Data_CustomerValidated : global::System.IEquatable<CreateCustomer_CreateCustomer_Data_CustomerValidated>, ICreateCustomer_CreateCustomer_Data_CustomerValidated
    {
        public CreateCustomer_CreateCustomer_Data_CustomerValidated(global::System.DateTimeOffset createdAt, global::System.Boolean isValid, global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data_Customer customer)
        {
            CreatedAt = createdAt;
            IsValid = isValid;
            Customer = customer;
        }

        public global::System.DateTimeOffset CreatedAt { get; }
        public global::System.Boolean IsValid { get; }
        public global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data_Customer Customer { get; }

        public virtual global::System.Boolean Equals(CreateCustomer_CreateCustomer_Data_CustomerValidated? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CreatedAt.Equals(other.CreatedAt)) && global::System.Object.Equals(IsValid, other.IsValid) && Customer.Equals(other.Customer);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCustomer_CreateCustomer_Data_CustomerValidated)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CreatedAt.GetHashCode();
                hash ^= 397 * IsValid.GetHashCode();
                hash ^= 397 * Customer.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomer_CreateCustomer_Data_Customer_Customer : global::System.IEquatable<CreateCustomer_CreateCustomer_Data_Customer_Customer>, ICreateCustomer_CreateCustomer_Data_Customer_Customer
    {
        public CreateCustomer_CreateCustomer_Data_Customer_Customer(global::System.Int32 calculateSize, global::System.String? id, global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data_Customer_Details? details)
        {
            CalculateSize = calculateSize;
            Id = id;
            Details = details;
        }

        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Id { get; }
        public global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data_Customer_Details? Details { get; }

        public virtual global::System.Boolean Equals(CreateCustomer_CreateCustomer_Data_Customer_Customer? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(CalculateSize, other.CalculateSize)) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((Details is null && other.Details is null) || Details != null && Details.Equals(other.Details));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCustomer_CreateCustomer_Data_Customer_Customer)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CalculateSize.GetHashCode();
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Details != null)
                {
                    hash ^= 397 * Details.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomer_CreateCustomer_Data_Customer_Details_CustomerDetails : global::System.IEquatable<CreateCustomer_CreateCustomer_Data_Customer_Details_CustomerDetails>, ICreateCustomer_CreateCustomer_Data_Customer_Details_CustomerDetails
    {
        public CreateCustomer_CreateCustomer_Data_Customer_Details_CustomerDetails(global::System.String? address, global::System.Int32 calculateSize, global::System.String? email, global::System.String? name, global::System.String? phone)
        {
            Address = address;
            CalculateSize = calculateSize;
            Email = email;
            Name = name;
            Phone = phone;
        }

        public global::System.String? Address { get; }
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Email { get; }
        public global::System.String? Name { get; }
        public global::System.String? Phone { get; }

        public virtual global::System.Boolean Equals(CreateCustomer_CreateCustomer_Data_Customer_Details_CustomerDetails? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Address is null && other.Address is null) || Address != null && Address.Equals(other.Address))) && global::System.Object.Equals(CalculateSize, other.CalculateSize) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Phone is null && other.Phone is null) || Phone != null && Phone.Equals(other.Phone));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCustomer_CreateCustomer_Data_Customer_Details_CustomerDetails)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Address != null)
                {
                    hash ^= 397 * Address.GetHashCode();
                }

                hash ^= 397 * CalculateSize.GetHashCode();
                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Phone != null)
                {
                    hash ^= 397 * Phone.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ICreateCustomerResult
    {
        public global::ConnectiqApiNS.ICreateCustomer_CreateCustomer CreateCustomer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ICreateCustomer_CreateCustomer
    {
        public global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Errors> Errors { get; }
        public global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data? Data { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ICreateCustomer_CreateCustomer_MutationResponseOfCustomerValidated : ICreateCustomer_CreateCustomer
    {
        public global::System.String Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode StatusCode { get; }
        public global::System.Boolean Success { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ICreateCustomer_CreateCustomer_Errors
    {
        public global::System.String? ErrorCode { get; }
        public global::System.String? PropertyName { get; }
        public global::ConnectiqApiNS.Severity Severity { get; }
        public global::System.String? ErrorMessage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ICreateCustomer_CreateCustomer_Errors_ValidationFailure : ICreateCustomer_CreateCustomer_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ICreateCustomer_CreateCustomer_Data
    {
        public global::System.DateTimeOffset CreatedAt { get; }
        public global::System.Boolean IsValid { get; }
        public global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data_Customer Customer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ICreateCustomer_CreateCustomer_Data_CustomerValidated : ICreateCustomer_CreateCustomer_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ICreateCustomer_CreateCustomer_Data_Customer
    {
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Id { get; }
        public global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data_Customer_Details? Details { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ICreateCustomer_CreateCustomer_Data_Customer_Customer : ICreateCustomer_CreateCustomer_Data_Customer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ICreateCustomer_CreateCustomer_Data_Customer_Details
    {
        public global::System.String? Address { get; }
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Email { get; }
        public global::System.String? Name { get; }
        public global::System.String? Phone { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ICreateCustomer_CreateCustomer_Data_Customer_Details_CustomerDetails : ICreateCustomer_CreateCustomer_Data_Customer_Details
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomerResult : global::System.IEquatable<SoftDeleteCustomerResult>, ISoftDeleteCustomerResult
    {
        public SoftDeleteCustomerResult(global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete softDelete)
        {
            SoftDelete = softDelete;
        }

        public global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete SoftDelete { get; }

        public virtual global::System.Boolean Equals(SoftDeleteCustomerResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SoftDelete.Equals(other.SoftDelete));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SoftDeleteCustomerResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SoftDelete.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomer_SoftDelete_MutationResponseOfCustomerValidated : global::System.IEquatable<SoftDeleteCustomer_SoftDelete_MutationResponseOfCustomerValidated>, ISoftDeleteCustomer_SoftDelete_MutationResponseOfCustomerValidated
    {
        public SoftDeleteCustomer_SoftDelete_MutationResponseOfCustomerValidated(global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Data? data, global::System.String message, global::ConnectiqApiNS.HttpStatusCode statusCode, global::System.Boolean success, global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Errors> errors)
        {
            Data = data;
            Message = message;
            StatusCode = statusCode;
            Success = success;
            Errors = errors;
        }

        /// <summary>
        /// The validated customer data.
        /// </summary>
        public global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Data? Data { get; }
        public global::System.String Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode StatusCode { get; }
        public global::System.Boolean Success { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Errors> Errors { get; }

        public virtual global::System.Boolean Equals(SoftDeleteCustomer_SoftDelete_MutationResponseOfCustomerValidated? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Data is null && other.Data is null) || Data != null && Data.Equals(other.Data))) && Message.Equals(other.Message) && StatusCode.Equals(other.StatusCode) && global::System.Object.Equals(Success, other.Success) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Errors, other.Errors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SoftDeleteCustomer_SoftDelete_MutationResponseOfCustomerValidated)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Data != null)
                {
                    hash ^= 397 * Data.GetHashCode();
                }

                hash ^= 397 * Message.GetHashCode();
                hash ^= 397 * StatusCode.GetHashCode();
                hash ^= 397 * Success.GetHashCode();
                foreach (var Errors_elm in Errors)
                {
                    hash ^= 397 * Errors_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomer_SoftDelete_Data_CustomerValidated : global::System.IEquatable<SoftDeleteCustomer_SoftDelete_Data_CustomerValidated>, ISoftDeleteCustomer_SoftDelete_Data_CustomerValidated
    {
        public SoftDeleteCustomer_SoftDelete_Data_CustomerValidated(global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Data_Customer customer)
        {
            Customer = customer;
        }

        public global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Data_Customer Customer { get; }

        public virtual global::System.Boolean Equals(SoftDeleteCustomer_SoftDelete_Data_CustomerValidated? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Customer.Equals(other.Customer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SoftDeleteCustomer_SoftDelete_Data_CustomerValidated)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Customer.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomer_SoftDelete_Errors_ValidationFailure : global::System.IEquatable<SoftDeleteCustomer_SoftDelete_Errors_ValidationFailure>, ISoftDeleteCustomer_SoftDelete_Errors_ValidationFailure
    {
        public SoftDeleteCustomer_SoftDelete_Errors_ValidationFailure(global::System.String? errorCode, global::System.String? errorMessage, global::System.String? propertyName, global::ConnectiqApiNS.Severity severity)
        {
            ErrorCode = errorCode;
            ErrorMessage = errorMessage;
            PropertyName = propertyName;
            Severity = severity;
        }

        public global::System.String? ErrorCode { get; }
        public global::System.String? ErrorMessage { get; }
        public global::System.String? PropertyName { get; }
        public global::ConnectiqApiNS.Severity Severity { get; }

        public virtual global::System.Boolean Equals(SoftDeleteCustomer_SoftDelete_Errors_ValidationFailure? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ErrorCode is null && other.ErrorCode is null) || ErrorCode != null && ErrorCode.Equals(other.ErrorCode))) && ((ErrorMessage is null && other.ErrorMessage is null) || ErrorMessage != null && ErrorMessage.Equals(other.ErrorMessage)) && ((PropertyName is null && other.PropertyName is null) || PropertyName != null && PropertyName.Equals(other.PropertyName)) && Severity.Equals(other.Severity);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SoftDeleteCustomer_SoftDelete_Errors_ValidationFailure)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErrorCode != null)
                {
                    hash ^= 397 * ErrorCode.GetHashCode();
                }

                if (ErrorMessage != null)
                {
                    hash ^= 397 * ErrorMessage.GetHashCode();
                }

                if (PropertyName != null)
                {
                    hash ^= 397 * PropertyName.GetHashCode();
                }

                hash ^= 397 * Severity.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomer_SoftDelete_Data_Customer_Customer : global::System.IEquatable<SoftDeleteCustomer_SoftDelete_Data_Customer_Customer>, ISoftDeleteCustomer_SoftDelete_Data_Customer_Customer
    {
        public SoftDeleteCustomer_SoftDelete_Data_Customer_Customer(global::System.Int32 calculateSize, global::System.String? id)
        {
            CalculateSize = calculateSize;
            Id = id;
        }

        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Id { get; }

        public virtual global::System.Boolean Equals(SoftDeleteCustomer_SoftDelete_Data_Customer_Customer? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(CalculateSize, other.CalculateSize)) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SoftDeleteCustomer_SoftDelete_Data_Customer_Customer)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CalculateSize.GetHashCode();
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ISoftDeleteCustomerResult
    {
        public global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete SoftDelete { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ISoftDeleteCustomer_SoftDelete
    {
        public global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Data? Data { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ISoftDeleteCustomer_SoftDelete_MutationResponseOfCustomerValidated : ISoftDeleteCustomer_SoftDelete
    {
        public global::System.String Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode StatusCode { get; }
        public global::System.Boolean Success { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Errors> Errors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ISoftDeleteCustomer_SoftDelete_Data
    {
        public global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Data_Customer Customer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ISoftDeleteCustomer_SoftDelete_Data_CustomerValidated : ISoftDeleteCustomer_SoftDelete_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ISoftDeleteCustomer_SoftDelete_Errors
    {
        public global::System.String? ErrorCode { get; }
        public global::System.String? ErrorMessage { get; }
        public global::System.String? PropertyName { get; }
        public global::ConnectiqApiNS.Severity Severity { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ISoftDeleteCustomer_SoftDelete_Errors_ValidationFailure : ISoftDeleteCustomer_SoftDelete_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ISoftDeleteCustomer_SoftDelete_Data_Customer
    {
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ISoftDeleteCustomer_SoftDelete_Data_Customer_Customer : ISoftDeleteCustomer_SoftDelete_Data_Customer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomerResult : global::System.IEquatable<UpdateCustomerResult>, IUpdateCustomerResult
    {
        public UpdateCustomerResult(global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer updateCustomer)
        {
            UpdateCustomer = updateCustomer;
        }

        public global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer UpdateCustomer { get; }

        public virtual global::System.Boolean Equals(UpdateCustomerResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (UpdateCustomer.Equals(other.UpdateCustomer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCustomerResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * UpdateCustomer.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomer_UpdateCustomer_MutationResponseOfCustomerValidated : global::System.IEquatable<UpdateCustomer_UpdateCustomer_MutationResponseOfCustomerValidated>, IUpdateCustomer_UpdateCustomer_MutationResponseOfCustomerValidated
    {
        public UpdateCustomer_UpdateCustomer_MutationResponseOfCustomerValidated(global::System.String message, global::ConnectiqApiNS.HttpStatusCode statusCode, global::System.Boolean success, global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Errors> errors, global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data? data)
        {
            Message = message;
            StatusCode = statusCode;
            Success = success;
            Errors = errors;
            Data = data;
        }

        public global::System.String Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode StatusCode { get; }
        public global::System.Boolean Success { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Errors> Errors { get; }
        /// <summary>
        /// The validated customer data.
        /// </summary>
        public global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data? Data { get; }

        public virtual global::System.Boolean Equals(UpdateCustomer_UpdateCustomer_MutationResponseOfCustomerValidated? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Message.Equals(other.Message)) && StatusCode.Equals(other.StatusCode) && global::System.Object.Equals(Success, other.Success) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Errors, other.Errors) && ((Data is null && other.Data is null) || Data != null && Data.Equals(other.Data));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCustomer_UpdateCustomer_MutationResponseOfCustomerValidated)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Message.GetHashCode();
                hash ^= 397 * StatusCode.GetHashCode();
                hash ^= 397 * Success.GetHashCode();
                foreach (var Errors_elm in Errors)
                {
                    hash ^= 397 * Errors_elm.GetHashCode();
                }

                if (Data != null)
                {
                    hash ^= 397 * Data.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomer_UpdateCustomer_Errors_ValidationFailure : global::System.IEquatable<UpdateCustomer_UpdateCustomer_Errors_ValidationFailure>, IUpdateCustomer_UpdateCustomer_Errors_ValidationFailure
    {
        public UpdateCustomer_UpdateCustomer_Errors_ValidationFailure(global::System.String? errorCode, global::System.String? errorMessage, global::System.String? propertyName, global::ConnectiqApiNS.Severity severity)
        {
            ErrorCode = errorCode;
            ErrorMessage = errorMessage;
            PropertyName = propertyName;
            Severity = severity;
        }

        public global::System.String? ErrorCode { get; }
        public global::System.String? ErrorMessage { get; }
        public global::System.String? PropertyName { get; }
        public global::ConnectiqApiNS.Severity Severity { get; }

        public virtual global::System.Boolean Equals(UpdateCustomer_UpdateCustomer_Errors_ValidationFailure? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ErrorCode is null && other.ErrorCode is null) || ErrorCode != null && ErrorCode.Equals(other.ErrorCode))) && ((ErrorMessage is null && other.ErrorMessage is null) || ErrorMessage != null && ErrorMessage.Equals(other.ErrorMessage)) && ((PropertyName is null && other.PropertyName is null) || PropertyName != null && PropertyName.Equals(other.PropertyName)) && Severity.Equals(other.Severity);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCustomer_UpdateCustomer_Errors_ValidationFailure)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErrorCode != null)
                {
                    hash ^= 397 * ErrorCode.GetHashCode();
                }

                if (ErrorMessage != null)
                {
                    hash ^= 397 * ErrorMessage.GetHashCode();
                }

                if (PropertyName != null)
                {
                    hash ^= 397 * PropertyName.GetHashCode();
                }

                hash ^= 397 * Severity.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomer_UpdateCustomer_Data_CustomerValidated : global::System.IEquatable<UpdateCustomer_UpdateCustomer_Data_CustomerValidated>, IUpdateCustomer_UpdateCustomer_Data_CustomerValidated
    {
        public UpdateCustomer_UpdateCustomer_Data_CustomerValidated(global::System.DateTimeOffset createdAt, global::System.Boolean isValid, global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data_Customer customer)
        {
            CreatedAt = createdAt;
            IsValid = isValid;
            Customer = customer;
        }

        public global::System.DateTimeOffset CreatedAt { get; }
        public global::System.Boolean IsValid { get; }
        public global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data_Customer Customer { get; }

        public virtual global::System.Boolean Equals(UpdateCustomer_UpdateCustomer_Data_CustomerValidated? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CreatedAt.Equals(other.CreatedAt)) && global::System.Object.Equals(IsValid, other.IsValid) && Customer.Equals(other.Customer);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCustomer_UpdateCustomer_Data_CustomerValidated)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CreatedAt.GetHashCode();
                hash ^= 397 * IsValid.GetHashCode();
                hash ^= 397 * Customer.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomer_UpdateCustomer_Data_Customer_Customer : global::System.IEquatable<UpdateCustomer_UpdateCustomer_Data_Customer_Customer>, IUpdateCustomer_UpdateCustomer_Data_Customer_Customer
    {
        public UpdateCustomer_UpdateCustomer_Data_Customer_Customer(global::System.Int32 calculateSize, global::System.String? id, global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data_Customer_Details? details)
        {
            CalculateSize = calculateSize;
            Id = id;
            Details = details;
        }

        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Id { get; }
        public global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data_Customer_Details? Details { get; }

        public virtual global::System.Boolean Equals(UpdateCustomer_UpdateCustomer_Data_Customer_Customer? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(CalculateSize, other.CalculateSize)) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((Details is null && other.Details is null) || Details != null && Details.Equals(other.Details));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCustomer_UpdateCustomer_Data_Customer_Customer)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CalculateSize.GetHashCode();
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Details != null)
                {
                    hash ^= 397 * Details.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomer_UpdateCustomer_Data_Customer_Details_CustomerDetails : global::System.IEquatable<UpdateCustomer_UpdateCustomer_Data_Customer_Details_CustomerDetails>, IUpdateCustomer_UpdateCustomer_Data_Customer_Details_CustomerDetails
    {
        public UpdateCustomer_UpdateCustomer_Data_Customer_Details_CustomerDetails(global::System.String? address, global::System.Int32 calculateSize, global::System.String? email, global::System.String? name, global::System.String? phone)
        {
            Address = address;
            CalculateSize = calculateSize;
            Email = email;
            Name = name;
            Phone = phone;
        }

        public global::System.String? Address { get; }
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Email { get; }
        public global::System.String? Name { get; }
        public global::System.String? Phone { get; }

        public virtual global::System.Boolean Equals(UpdateCustomer_UpdateCustomer_Data_Customer_Details_CustomerDetails? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Address is null && other.Address is null) || Address != null && Address.Equals(other.Address))) && global::System.Object.Equals(CalculateSize, other.CalculateSize) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Phone is null && other.Phone is null) || Phone != null && Phone.Equals(other.Phone));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCustomer_UpdateCustomer_Data_Customer_Details_CustomerDetails)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Address != null)
                {
                    hash ^= 397 * Address.GetHashCode();
                }

                hash ^= 397 * CalculateSize.GetHashCode();
                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Phone != null)
                {
                    hash ^= 397 * Phone.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IUpdateCustomerResult
    {
        public global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer UpdateCustomer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IUpdateCustomer_UpdateCustomer
    {
        public global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data? Data { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IUpdateCustomer_UpdateCustomer_MutationResponseOfCustomerValidated : IUpdateCustomer_UpdateCustomer
    {
        public global::System.String Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode StatusCode { get; }
        public global::System.Boolean Success { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Errors> Errors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IUpdateCustomer_UpdateCustomer_Errors
    {
        public global::System.String? ErrorCode { get; }
        public global::System.String? ErrorMessage { get; }
        public global::System.String? PropertyName { get; }
        public global::ConnectiqApiNS.Severity Severity { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IUpdateCustomer_UpdateCustomer_Errors_ValidationFailure : IUpdateCustomer_UpdateCustomer_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IUpdateCustomer_UpdateCustomer_Data
    {
        public global::System.DateTimeOffset CreatedAt { get; }
        public global::System.Boolean IsValid { get; }
        public global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data_Customer Customer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IUpdateCustomer_UpdateCustomer_Data_CustomerValidated : IUpdateCustomer_UpdateCustomer_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IUpdateCustomer_UpdateCustomer_Data_Customer
    {
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Id { get; }
        public global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data_Customer_Details? Details { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IUpdateCustomer_UpdateCustomer_Data_Customer_Customer : IUpdateCustomer_UpdateCustomer_Data_Customer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IUpdateCustomer_UpdateCustomer_Data_Customer_Details
    {
        public global::System.String? Address { get; }
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Email { get; }
        public global::System.String? Name { get; }
        public global::System.String? Phone { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IUpdateCustomer_UpdateCustomer_Data_Customer_Details_CustomerDetails : IUpdateCustomer_UpdateCustomer_Data_Customer_Details
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllCustomersResult : global::System.IEquatable<GetAllCustomersResult>, IGetAllCustomersResult
    {
        public GetAllCustomersResult(global::ConnectiqApiNS.IGetAllCustomers_AllCustomers allCustomers)
        {
            AllCustomers = allCustomers;
        }

        public global::ConnectiqApiNS.IGetAllCustomers_AllCustomers AllCustomers { get; }

        public virtual global::System.Boolean Equals(GetAllCustomersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AllCustomers.Equals(other.AllCustomers));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllCustomersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AllCustomers.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllCustomers_AllCustomers_QueryResponseOfGetCustomersResponse : global::System.IEquatable<GetAllCustomers_AllCustomers_QueryResponseOfGetCustomersResponse>, IGetAllCustomers_AllCustomers_QueryResponseOfGetCustomersResponse
    {
        public GetAllCustomers_AllCustomers_QueryResponseOfGetCustomersResponse(global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data? data, global::System.String? message, global::ConnectiqApiNS.HttpStatusCode statusCode, global::System.Boolean success)
        {
            Data = data;
            Message = message;
            StatusCode = statusCode;
            Success = success;
        }

        /// <summary>
        /// The customer data.
        /// </summary>
        public global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data? Data { get; }
        public global::System.String? Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode StatusCode { get; }
        public global::System.Boolean Success { get; }

        public virtual global::System.Boolean Equals(GetAllCustomers_AllCustomers_QueryResponseOfGetCustomersResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Data is null && other.Data is null) || Data != null && Data.Equals(other.Data))) && ((Message is null && other.Message is null) || Message != null && Message.Equals(other.Message)) && StatusCode.Equals(other.StatusCode) && global::System.Object.Equals(Success, other.Success);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllCustomers_AllCustomers_QueryResponseOfGetCustomersResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Data != null)
                {
                    hash ^= 397 * Data.GetHashCode();
                }

                if (Message != null)
                {
                    hash ^= 397 * Message.GetHashCode();
                }

                hash ^= 397 * StatusCode.GetHashCode();
                hash ^= 397 * Success.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllCustomers_AllCustomers_Data_GetCustomersResponse : global::System.IEquatable<GetAllCustomers_AllCustomers_Data_GetCustomersResponse>, IGetAllCustomers_AllCustomers_Data_GetCustomersResponse
    {
        public GetAllCustomers_AllCustomers_Data_GetCustomersResponse(global::System.Int32 calculateSize, global::System.Int32 totalCount, global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers?>? customers)
        {
            CalculateSize = calculateSize;
            TotalCount = totalCount;
            Customers = customers;
        }

        public global::System.Int32 CalculateSize { get; }
        public global::System.Int32 TotalCount { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers?>? Customers { get; }

        public virtual global::System.Boolean Equals(GetAllCustomers_AllCustomers_Data_GetCustomersResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(CalculateSize, other.CalculateSize)) && global::System.Object.Equals(TotalCount, other.TotalCount) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Customers, other.Customers);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllCustomers_AllCustomers_Data_GetCustomersResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CalculateSize.GetHashCode();
                hash ^= 397 * TotalCount.GetHashCode();
                if (Customers != null)
                {
                    foreach (var Customers_elm in Customers)
                    {
                        if (Customers_elm != null)
                        {
                            hash ^= 397 * Customers_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllCustomers_AllCustomers_Data_Customers_CustomerDto : global::System.IEquatable<GetAllCustomers_AllCustomers_Data_Customers_CustomerDto>, IGetAllCustomers_AllCustomers_Data_Customers_CustomerDto
    {
        public GetAllCustomers_AllCustomers_Data_Customers_CustomerDto(global::System.Int32 calculateSize, global::System.String? createdAt, global::System.String? eventId, global::System.Boolean isActive, global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers_Customer? customer)
        {
            CalculateSize = calculateSize;
            CreatedAt = createdAt;
            EventId = eventId;
            IsActive = isActive;
            Customer = customer;
        }

        public global::System.Int32 CalculateSize { get; }
        public global::System.String? CreatedAt { get; }
        public global::System.String? EventId { get; }
        public global::System.Boolean IsActive { get; }
        public global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers_Customer? Customer { get; }

        public virtual global::System.Boolean Equals(GetAllCustomers_AllCustomers_Data_Customers_CustomerDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(CalculateSize, other.CalculateSize)) && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && ((EventId is null && other.EventId is null) || EventId != null && EventId.Equals(other.EventId)) && global::System.Object.Equals(IsActive, other.IsActive) && ((Customer is null && other.Customer is null) || Customer != null && Customer.Equals(other.Customer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllCustomers_AllCustomers_Data_Customers_CustomerDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CalculateSize.GetHashCode();
                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                if (EventId != null)
                {
                    hash ^= 397 * EventId.GetHashCode();
                }

                hash ^= 397 * IsActive.GetHashCode();
                if (Customer != null)
                {
                    hash ^= 397 * Customer.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllCustomers_AllCustomers_Data_Customers_Customer_Customer : global::System.IEquatable<GetAllCustomers_AllCustomers_Data_Customers_Customer_Customer>, IGetAllCustomers_AllCustomers_Data_Customers_Customer_Customer
    {
        public GetAllCustomers_AllCustomers_Data_Customers_Customer_Customer(global::System.Int32 calculateSize, global::System.String? id, global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details? details)
        {
            CalculateSize = calculateSize;
            Id = id;
            Details = details;
        }

        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Id { get; }
        public global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details? Details { get; }

        public virtual global::System.Boolean Equals(GetAllCustomers_AllCustomers_Data_Customers_Customer_Customer? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(CalculateSize, other.CalculateSize)) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((Details is null && other.Details is null) || Details != null && Details.Equals(other.Details));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllCustomers_AllCustomers_Data_Customers_Customer_Customer)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CalculateSize.GetHashCode();
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Details != null)
                {
                    hash ^= 397 * Details.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllCustomers_AllCustomers_Data_Customers_Customer_Details_CustomerDetails : global::System.IEquatable<GetAllCustomers_AllCustomers_Data_Customers_Customer_Details_CustomerDetails>, IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details_CustomerDetails
    {
        public GetAllCustomers_AllCustomers_Data_Customers_Customer_Details_CustomerDetails(global::System.String? address, global::System.Int32 calculateSize, global::System.String? email, global::System.String? name, global::System.String? phone)
        {
            Address = address;
            CalculateSize = calculateSize;
            Email = email;
            Name = name;
            Phone = phone;
        }

        public global::System.String? Address { get; }
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Email { get; }
        public global::System.String? Name { get; }
        public global::System.String? Phone { get; }

        public virtual global::System.Boolean Equals(GetAllCustomers_AllCustomers_Data_Customers_Customer_Details_CustomerDetails? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Address is null && other.Address is null) || Address != null && Address.Equals(other.Address))) && global::System.Object.Equals(CalculateSize, other.CalculateSize) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Phone is null && other.Phone is null) || Phone != null && Phone.Equals(other.Phone));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllCustomers_AllCustomers_Data_Customers_Customer_Details_CustomerDetails)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Address != null)
                {
                    hash ^= 397 * Address.GetHashCode();
                }

                hash ^= 397 * CalculateSize.GetHashCode();
                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Phone != null)
                {
                    hash ^= 397 * Phone.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetAllCustomersResult
    {
        public global::ConnectiqApiNS.IGetAllCustomers_AllCustomers AllCustomers { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetAllCustomers_AllCustomers
    {
        public global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data? Data { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetAllCustomers_AllCustomers_QueryResponseOfGetCustomersResponse : IGetAllCustomers_AllCustomers
    {
        public global::System.String? Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode StatusCode { get; }
        public global::System.Boolean Success { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetAllCustomers_AllCustomers_Data
    {
        public global::System.Int32 CalculateSize { get; }
        public global::System.Int32 TotalCount { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers?>? Customers { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetAllCustomers_AllCustomers_Data_GetCustomersResponse : IGetAllCustomers_AllCustomers_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetAllCustomers_AllCustomers_Data_Customers
    {
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? CreatedAt { get; }
        public global::System.String? EventId { get; }
        public global::System.Boolean IsActive { get; }
        public global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers_Customer? Customer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetAllCustomers_AllCustomers_Data_Customers_CustomerDto : IGetAllCustomers_AllCustomers_Data_Customers
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetAllCustomers_AllCustomers_Data_Customers_Customer
    {
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Id { get; }
        public global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details? Details { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetAllCustomers_AllCustomers_Data_Customers_Customer_Customer : IGetAllCustomers_AllCustomers_Data_Customers_Customer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details
    {
        public global::System.String? Address { get; }
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Email { get; }
        public global::System.String? Name { get; }
        public global::System.String? Phone { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details_CustomerDetails : IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerByIdResult : global::System.IEquatable<GetCustomerByIdResult>, IGetCustomerByIdResult
    {
        public GetCustomerByIdResult(global::ConnectiqApiNS.IGetCustomerById_CustomerById customerById)
        {
            CustomerById = customerById;
        }

        public global::ConnectiqApiNS.IGetCustomerById_CustomerById CustomerById { get; }

        public virtual global::System.Boolean Equals(GetCustomerByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CustomerById.Equals(other.CustomerById));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CustomerById.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerById_CustomerById_QueryResponseOfGetCustomerResponse : global::System.IEquatable<GetCustomerById_CustomerById_QueryResponseOfGetCustomerResponse>, IGetCustomerById_CustomerById_QueryResponseOfGetCustomerResponse
    {
        public GetCustomerById_CustomerById_QueryResponseOfGetCustomerResponse(global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data? data, global::System.String? message, global::ConnectiqApiNS.HttpStatusCode statusCode, global::System.Boolean success)
        {
            Data = data;
            Message = message;
            StatusCode = statusCode;
            Success = success;
        }

        /// <summary>
        /// The validated customer data.
        /// </summary>
        public global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data? Data { get; }
        public global::System.String? Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode StatusCode { get; }
        public global::System.Boolean Success { get; }

        public virtual global::System.Boolean Equals(GetCustomerById_CustomerById_QueryResponseOfGetCustomerResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Data is null && other.Data is null) || Data != null && Data.Equals(other.Data))) && ((Message is null && other.Message is null) || Message != null && Message.Equals(other.Message)) && StatusCode.Equals(other.StatusCode) && global::System.Object.Equals(Success, other.Success);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerById_CustomerById_QueryResponseOfGetCustomerResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Data != null)
                {
                    hash ^= 397 * Data.GetHashCode();
                }

                if (Message != null)
                {
                    hash ^= 397 * Message.GetHashCode();
                }

                hash ^= 397 * StatusCode.GetHashCode();
                hash ^= 397 * Success.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerById_CustomerById_Data_GetCustomerResponse : global::System.IEquatable<GetCustomerById_CustomerById_Data_GetCustomerResponse>, IGetCustomerById_CustomerById_Data_GetCustomerResponse
    {
        public GetCustomerById_CustomerById_Data_GetCustomerResponse(global::System.Int32 calculateSize, global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto? customerDto)
        {
            CalculateSize = calculateSize;
            CustomerDto = customerDto;
        }

        public global::System.Int32 CalculateSize { get; }
        public global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto? CustomerDto { get; }

        public virtual global::System.Boolean Equals(GetCustomerById_CustomerById_Data_GetCustomerResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(CalculateSize, other.CalculateSize)) && ((CustomerDto is null && other.CustomerDto is null) || CustomerDto != null && CustomerDto.Equals(other.CustomerDto));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerById_CustomerById_Data_GetCustomerResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CalculateSize.GetHashCode();
                if (CustomerDto != null)
                {
                    hash ^= 397 * CustomerDto.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerById_CustomerById_Data_CustomerDto_CustomerDto : global::System.IEquatable<GetCustomerById_CustomerById_Data_CustomerDto_CustomerDto>, IGetCustomerById_CustomerById_Data_CustomerDto_CustomerDto
    {
        public GetCustomerById_CustomerById_Data_CustomerDto_CustomerDto(global::System.Int32 calculateSize, global::System.String? createdAt, global::System.String? eventId, global::System.Boolean isActive, global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto_Customer? customer)
        {
            CalculateSize = calculateSize;
            CreatedAt = createdAt;
            EventId = eventId;
            IsActive = isActive;
            Customer = customer;
        }

        public global::System.Int32 CalculateSize { get; }
        public global::System.String? CreatedAt { get; }
        public global::System.String? EventId { get; }
        public global::System.Boolean IsActive { get; }
        public global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto_Customer? Customer { get; }

        public virtual global::System.Boolean Equals(GetCustomerById_CustomerById_Data_CustomerDto_CustomerDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(CalculateSize, other.CalculateSize)) && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && ((EventId is null && other.EventId is null) || EventId != null && EventId.Equals(other.EventId)) && global::System.Object.Equals(IsActive, other.IsActive) && ((Customer is null && other.Customer is null) || Customer != null && Customer.Equals(other.Customer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerById_CustomerById_Data_CustomerDto_CustomerDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CalculateSize.GetHashCode();
                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                if (EventId != null)
                {
                    hash ^= 397 * EventId.GetHashCode();
                }

                hash ^= 397 * IsActive.GetHashCode();
                if (Customer != null)
                {
                    hash ^= 397 * Customer.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer : global::System.IEquatable<GetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer>, IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer
    {
        public GetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer(global::System.Int32 calculateSize, global::System.String? id, global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details? details)
        {
            CalculateSize = calculateSize;
            Id = id;
            Details = details;
        }

        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Id { get; }
        public global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details? Details { get; }

        public virtual global::System.Boolean Equals(GetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(CalculateSize, other.CalculateSize)) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((Details is null && other.Details is null) || Details != null && Details.Equals(other.Details));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CalculateSize.GetHashCode();
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Details != null)
                {
                    hash ^= 397 * Details.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerById_CustomerById_Data_CustomerDto_Customer_Details_CustomerDetails : global::System.IEquatable<GetCustomerById_CustomerById_Data_CustomerDto_Customer_Details_CustomerDetails>, IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details_CustomerDetails
    {
        public GetCustomerById_CustomerById_Data_CustomerDto_Customer_Details_CustomerDetails(global::System.String? address, global::System.Int32 calculateSize, global::System.String? email, global::System.String? name, global::System.String? phone)
        {
            Address = address;
            CalculateSize = calculateSize;
            Email = email;
            Name = name;
            Phone = phone;
        }

        public global::System.String? Address { get; }
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Email { get; }
        public global::System.String? Name { get; }
        public global::System.String? Phone { get; }

        public virtual global::System.Boolean Equals(GetCustomerById_CustomerById_Data_CustomerDto_Customer_Details_CustomerDetails? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Address is null && other.Address is null) || Address != null && Address.Equals(other.Address))) && global::System.Object.Equals(CalculateSize, other.CalculateSize) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Phone is null && other.Phone is null) || Phone != null && Phone.Equals(other.Phone));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerById_CustomerById_Data_CustomerDto_Customer_Details_CustomerDetails)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Address != null)
                {
                    hash ^= 397 * Address.GetHashCode();
                }

                hash ^= 397 * CalculateSize.GetHashCode();
                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Phone != null)
                {
                    hash ^= 397 * Phone.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetCustomerByIdResult
    {
        public global::ConnectiqApiNS.IGetCustomerById_CustomerById CustomerById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetCustomerById_CustomerById
    {
        public global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data? Data { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetCustomerById_CustomerById_QueryResponseOfGetCustomerResponse : IGetCustomerById_CustomerById
    {
        public global::System.String? Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode StatusCode { get; }
        public global::System.Boolean Success { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetCustomerById_CustomerById_Data
    {
        public global::System.Int32 CalculateSize { get; }
        public global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto? CustomerDto { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetCustomerById_CustomerById_Data_GetCustomerResponse : IGetCustomerById_CustomerById_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetCustomerById_CustomerById_Data_CustomerDto
    {
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? CreatedAt { get; }
        public global::System.String? EventId { get; }
        public global::System.Boolean IsActive { get; }
        public global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto_Customer? Customer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetCustomerById_CustomerById_Data_CustomerDto_CustomerDto : IGetCustomerById_CustomerById_Data_CustomerDto
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetCustomerById_CustomerById_Data_CustomerDto_Customer
    {
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Id { get; }
        public global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details? Details { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer : IGetCustomerById_CustomerById_Data_CustomerDto_Customer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details
    {
        public global::System.String? Address { get; }
        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Email { get; }
        public global::System.String? Name { get; }
        public global::System.String? Phone { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details_CustomerDetails : IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomerInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _customerDetailsInputFormatter = default !;
        public global::System.String TypeName => "CreateCustomerInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _customerDetailsInputFormatter = serializerResolver.GetInputValueFormatter("CustomerDetailsInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::ConnectiqApiNS.CreateCustomerInput;
            var inputInfo = runtimeValue as global::ConnectiqApiNS.State.ICreateCustomerInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsDetailsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("details", FormatDetails(input.Details)));
            }

            return fields;
        }

        private global::System.Object? FormatDetails(global::ConnectiqApiNS.CustomerDetailsInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _customerDetailsInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomerInput : global::ConnectiqApiNS.State.ICreateCustomerInputInfo, global::System.IEquatable<CreateCustomerInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCustomerInput)obj);
        }

        public virtual global::System.Boolean Equals(CreateCustomerInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Details is null && other.Details is null) || Details != null && Details.Equals(other.Details)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Details != null)
                {
                    hash ^= 397 * Details.GetHashCode();
                }

                return hash;
            }
        }

        private global::ConnectiqApiNS.CustomerDetailsInput? _value_details;
        private global::System.Boolean _set_details;
        public global::ConnectiqApiNS.CustomerDetailsInput? Details
        {
            get => _value_details;
            set
            {
                _set_details = true;
                _value_details = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.ICreateCustomerInputInfo.IsDetailsSet => _set_details;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CustomerDetailsInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "CustomerDetailsInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::ConnectiqApiNS.CustomerDetailsInput;
            var inputInfo = runtimeValue as global::ConnectiqApiNS.State.ICustomerDetailsInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsAddressSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("address", FormatAddress(input.Address)));
            }

            if (inputInfo.IsPhoneSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("phone", FormatPhone(input.Phone)));
            }

            if (inputInfo.IsEmailSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("email", FormatEmail(input.Email)));
            }

            return fields;
        }

        private global::System.Object? FormatName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAddress(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPhone(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEmail(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CustomerDetailsInput : global::ConnectiqApiNS.State.ICustomerDetailsInputInfo, global::System.IEquatable<CustomerDetailsInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CustomerDetailsInput)obj);
        }

        public virtual global::System.Boolean Equals(CustomerDetailsInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Address is null && other.Address is null) || Address != null && Address.Equals(other.Address)) && ((Phone is null && other.Phone is null) || Phone != null && Phone.Equals(other.Phone)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Address != null)
                {
                    hash ^= 397 * Address.GetHashCode();
                }

                if (Phone != null)
                {
                    hash ^= 397 * Phone.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_name;
        private global::System.Boolean _set_name;
        private global::System.String? _value_address;
        private global::System.Boolean _set_address;
        private global::System.String? _value_phone;
        private global::System.Boolean _set_phone;
        private global::System.String? _value_email;
        private global::System.Boolean _set_email;
        public global::System.String? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.ICustomerDetailsInputInfo.IsNameSet => _set_name;

        public global::System.String? Address
        {
            get => _value_address;
            set
            {
                _set_address = true;
                _value_address = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.ICustomerDetailsInputInfo.IsAddressSet => _set_address;

        public global::System.String? Phone
        {
            get => _value_phone;
            set
            {
                _set_phone = true;
                _value_phone = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.ICustomerDetailsInputInfo.IsPhoneSet => _set_phone;

        public global::System.String? Email
        {
            get => _value_email;
            set
            {
                _set_email = true;
                _value_email = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.ICustomerDetailsInputInfo.IsEmailSet => _set_email;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomerInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "SoftDeleteCustomerInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::ConnectiqApiNS.SoftDeleteCustomerInput;
            var inputInfo = runtimeValue as global::ConnectiqApiNS.State.ISoftDeleteCustomerInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomerInput : global::ConnectiqApiNS.State.ISoftDeleteCustomerInputInfo, global::System.IEquatable<SoftDeleteCustomerInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SoftDeleteCustomerInput)obj);
        }

        public virtual global::System.Boolean Equals(SoftDeleteCustomerInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_id;
        private global::System.Boolean _set_id;
        public global::System.String? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.ISoftDeleteCustomerInputInfo.IsIdSet => _set_id;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomerInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _customerInputFormatter = default !;
        public global::System.String TypeName => "UpdateCustomerInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _customerInputFormatter = serializerResolver.GetInputValueFormatter("CustomerInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::ConnectiqApiNS.UpdateCustomerInput;
            var inputInfo = runtimeValue as global::ConnectiqApiNS.State.IUpdateCustomerInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsCustomerSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("customer", FormatCustomer(input.Customer)));
            }

            return fields;
        }

        private global::System.Object? FormatCustomer(global::ConnectiqApiNS.CustomerInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _customerInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomerInput : global::ConnectiqApiNS.State.IUpdateCustomerInputInfo, global::System.IEquatable<UpdateCustomerInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCustomerInput)obj);
        }

        public virtual global::System.Boolean Equals(UpdateCustomerInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Customer is null && other.Customer is null) || Customer != null && Customer.Equals(other.Customer)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Customer != null)
                {
                    hash ^= 397 * Customer.GetHashCode();
                }

                return hash;
            }
        }

        private global::ConnectiqApiNS.CustomerInput? _value_customer;
        private global::System.Boolean _set_customer;
        public global::ConnectiqApiNS.CustomerInput? Customer
        {
            get => _value_customer;
            set
            {
                _set_customer = true;
                _value_customer = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.IUpdateCustomerInputInfo.IsCustomerSet => _set_customer;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CustomerInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _customerDetailsInputFormatter = default !;
        public global::System.String TypeName => "CustomerInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _customerDetailsInputFormatter = serializerResolver.GetInputValueFormatter("CustomerDetailsInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::ConnectiqApiNS.CustomerInput;
            var inputInfo = runtimeValue as global::ConnectiqApiNS.State.ICustomerInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsDetailsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("details", FormatDetails(input.Details)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDetails(global::ConnectiqApiNS.CustomerDetailsInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _customerDetailsInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CustomerInput : global::ConnectiqApiNS.State.ICustomerInputInfo, global::System.IEquatable<CustomerInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CustomerInput)obj);
        }

        public virtual global::System.Boolean Equals(CustomerInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id))) && ((Details is null && other.Details is null) || Details != null && Details.Equals(other.Details));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Details != null)
                {
                    hash ^= 397 * Details.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_id;
        private global::System.Boolean _set_id;
        private global::ConnectiqApiNS.CustomerDetailsInput? _value_details;
        private global::System.Boolean _set_details;
        public global::System.String? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.ICustomerInputInfo.IsIdSet => _set_id;

        public global::ConnectiqApiNS.CustomerDetailsInput? Details
        {
            get => _value_details;
            set
            {
                _set_details = true;
                _value_details = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.ICustomerInputInfo.IsDetailsSet => _set_details;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllFiltersInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _customerFiltersInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "GetAllFiltersInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _customerFiltersInputFormatter = serializerResolver.GetInputValueFormatter("CustomerFiltersInput");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::ConnectiqApiNS.GetAllFiltersInput;
            var inputInfo = runtimeValue as global::ConnectiqApiNS.State.IGetAllFiltersInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsFiltersSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("filters", FormatFilters(input.Filters)));
            }

            if (inputInfo.IsPageSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("page", FormatPage(input.Page)));
            }

            if (inputInfo.IsPageSizeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("pageSize", FormatPageSize(input.PageSize)));
            }

            return fields;
        }

        private global::System.Object? FormatFilters(global::ConnectiqApiNS.CustomerFiltersInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _customerFiltersInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPage(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatPageSize(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllFiltersInput : global::ConnectiqApiNS.State.IGetAllFiltersInputInfo, global::System.IEquatable<GetAllFiltersInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllFiltersInput)obj);
        }

        public virtual global::System.Boolean Equals(GetAllFiltersInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Filters is null && other.Filters is null) || Filters != null && Filters.Equals(other.Filters))) && global::System.Object.Equals(Page, other.Page) && global::System.Object.Equals(PageSize, other.PageSize);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Filters != null)
                {
                    hash ^= 397 * Filters.GetHashCode();
                }

                hash ^= 397 * Page.GetHashCode();
                hash ^= 397 * PageSize.GetHashCode();
                return hash;
            }
        }

        private global::ConnectiqApiNS.CustomerFiltersInput? _value_filters;
        private global::System.Boolean _set_filters;
        private global::System.Int32 _value_page;
        private global::System.Boolean _set_page;
        private global::System.Int32 _value_pageSize;
        private global::System.Boolean _set_pageSize;
        public global::ConnectiqApiNS.CustomerFiltersInput? Filters
        {
            get => _value_filters;
            set
            {
                _set_filters = true;
                _value_filters = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.IGetAllFiltersInputInfo.IsFiltersSet => _set_filters;

        public global::System.Int32 Page
        {
            get => _value_page;
            set
            {
                _set_page = true;
                _value_page = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.IGetAllFiltersInputInfo.IsPageSet => _set_page;

        public global::System.Int32 PageSize
        {
            get => _value_pageSize;
            set
            {
                _set_pageSize = true;
                _value_pageSize = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.IGetAllFiltersInputInfo.IsPageSizeSet => _set_pageSize;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CustomerFiltersInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "CustomerFiltersInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::ConnectiqApiNS.CustomerFiltersInput;
            var inputInfo = runtimeValue as global::ConnectiqApiNS.State.ICustomerFiltersInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsAddressSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("address", FormatAddress(input.Address)));
            }

            if (inputInfo.IsEmailSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("email", FormatEmail(input.Email)));
            }

            if (inputInfo.IsPhoneSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("phone", FormatPhone(input.Phone)));
            }

            return fields;
        }

        private global::System.Object? FormatName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAddress(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEmail(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPhone(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CustomerFiltersInput : global::ConnectiqApiNS.State.ICustomerFiltersInputInfo, global::System.IEquatable<CustomerFiltersInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CustomerFiltersInput)obj);
        }

        public virtual global::System.Boolean Equals(CustomerFiltersInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Address is null && other.Address is null) || Address != null && Address.Equals(other.Address)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((Phone is null && other.Phone is null) || Phone != null && Phone.Equals(other.Phone));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Address != null)
                {
                    hash ^= 397 * Address.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (Phone != null)
                {
                    hash ^= 397 * Phone.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_name;
        private global::System.Boolean _set_name;
        private global::System.String? _value_address;
        private global::System.Boolean _set_address;
        private global::System.String? _value_email;
        private global::System.Boolean _set_email;
        private global::System.String? _value_phone;
        private global::System.Boolean _set_phone;
        public global::System.String? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.ICustomerFiltersInputInfo.IsNameSet => _set_name;

        public global::System.String? Address
        {
            get => _value_address;
            set
            {
                _set_address = true;
                _value_address = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.ICustomerFiltersInputInfo.IsAddressSet => _set_address;

        public global::System.String? Email
        {
            get => _value_email;
            set
            {
                _set_email = true;
                _value_email = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.ICustomerFiltersInputInfo.IsEmailSet => _set_email;

        public global::System.String? Phone
        {
            get => _value_phone;
            set
            {
                _set_phone = true;
                _value_phone = value;
            }
        }

        global::System.Boolean global::ConnectiqApiNS.State.ICustomerFiltersInputInfo.IsPhoneSet => _set_phone;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public enum HttpStatusCode
    {
        Continue,
        SwitchingProtocols,
        Processing,
        EarlyHints,
        Ok,
        Created,
        Accepted,
        NonAuthoritativeInformation,
        NoContent,
        ResetContent,
        PartialContent,
        MultiStatus,
        AlreadyReported,
        ImUsed,
        MultipleChoices,
        MovedPermanently,
        Found,
        SeeOther,
        NotModified,
        UseProxy,
        Unused,
        RedirectKeepVerb,
        PermanentRedirect,
        BadRequest,
        Unauthorized,
        PaymentRequired,
        Forbidden,
        NotFound,
        MethodNotAllowed,
        NotAcceptable,
        ProxyAuthenticationRequired,
        RequestTimeout,
        Conflict,
        Gone,
        LengthRequired,
        PreconditionFailed,
        RequestEntityTooLarge,
        RequestUriTooLong,
        UnsupportedMediaType,
        RequestedRangeNotSatisfiable,
        ExpectationFailed,
        MisdirectedRequest,
        UnprocessableEntity,
        Locked,
        FailedDependency,
        UpgradeRequired,
        PreconditionRequired,
        TooManyRequests,
        RequestHeaderFieldsTooLarge,
        UnavailableForLegalReasons,
        InternalServerError,
        NotImplemented,
        BadGateway,
        ServiceUnavailable,
        GatewayTimeout,
        HttpVersionNotSupported,
        VariantAlsoNegotiates,
        InsufficientStorage,
        LoopDetected,
        NotExtended,
        NetworkAuthenticationRequired
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class HttpStatusCodeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, HttpStatusCode>
    {
        public global::System.String TypeName => "HttpStatusCode";

        public HttpStatusCode Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "CONTINUE" => HttpStatusCode.Continue,
                "SWITCHING_PROTOCOLS" => HttpStatusCode.SwitchingProtocols,
                "PROCESSING" => HttpStatusCode.Processing,
                "EARLY_HINTS" => HttpStatusCode.EarlyHints,
                "OK" => HttpStatusCode.Ok,
                "CREATED" => HttpStatusCode.Created,
                "ACCEPTED" => HttpStatusCode.Accepted,
                "NON_AUTHORITATIVE_INFORMATION" => HttpStatusCode.NonAuthoritativeInformation,
                "NO_CONTENT" => HttpStatusCode.NoContent,
                "RESET_CONTENT" => HttpStatusCode.ResetContent,
                "PARTIAL_CONTENT" => HttpStatusCode.PartialContent,
                "MULTI_STATUS" => HttpStatusCode.MultiStatus,
                "ALREADY_REPORTED" => HttpStatusCode.AlreadyReported,
                "IM_USED" => HttpStatusCode.ImUsed,
                "MULTIPLE_CHOICES" => HttpStatusCode.MultipleChoices,
                "MOVED_PERMANENTLY" => HttpStatusCode.MovedPermanently,
                "FOUND" => HttpStatusCode.Found,
                "SEE_OTHER" => HttpStatusCode.SeeOther,
                "NOT_MODIFIED" => HttpStatusCode.NotModified,
                "USE_PROXY" => HttpStatusCode.UseProxy,
                "UNUSED" => HttpStatusCode.Unused,
                "REDIRECT_KEEP_VERB" => HttpStatusCode.RedirectKeepVerb,
                "PERMANENT_REDIRECT" => HttpStatusCode.PermanentRedirect,
                "BAD_REQUEST" => HttpStatusCode.BadRequest,
                "UNAUTHORIZED" => HttpStatusCode.Unauthorized,
                "PAYMENT_REQUIRED" => HttpStatusCode.PaymentRequired,
                "FORBIDDEN" => HttpStatusCode.Forbidden,
                "NOT_FOUND" => HttpStatusCode.NotFound,
                "METHOD_NOT_ALLOWED" => HttpStatusCode.MethodNotAllowed,
                "NOT_ACCEPTABLE" => HttpStatusCode.NotAcceptable,
                "PROXY_AUTHENTICATION_REQUIRED" => HttpStatusCode.ProxyAuthenticationRequired,
                "REQUEST_TIMEOUT" => HttpStatusCode.RequestTimeout,
                "CONFLICT" => HttpStatusCode.Conflict,
                "GONE" => HttpStatusCode.Gone,
                "LENGTH_REQUIRED" => HttpStatusCode.LengthRequired,
                "PRECONDITION_FAILED" => HttpStatusCode.PreconditionFailed,
                "REQUEST_ENTITY_TOO_LARGE" => HttpStatusCode.RequestEntityTooLarge,
                "REQUEST_URI_TOO_LONG" => HttpStatusCode.RequestUriTooLong,
                "UNSUPPORTED_MEDIA_TYPE" => HttpStatusCode.UnsupportedMediaType,
                "REQUESTED_RANGE_NOT_SATISFIABLE" => HttpStatusCode.RequestedRangeNotSatisfiable,
                "EXPECTATION_FAILED" => HttpStatusCode.ExpectationFailed,
                "MISDIRECTED_REQUEST" => HttpStatusCode.MisdirectedRequest,
                "UNPROCESSABLE_ENTITY" => HttpStatusCode.UnprocessableEntity,
                "LOCKED" => HttpStatusCode.Locked,
                "FAILED_DEPENDENCY" => HttpStatusCode.FailedDependency,
                "UPGRADE_REQUIRED" => HttpStatusCode.UpgradeRequired,
                "PRECONDITION_REQUIRED" => HttpStatusCode.PreconditionRequired,
                "TOO_MANY_REQUESTS" => HttpStatusCode.TooManyRequests,
                "REQUEST_HEADER_FIELDS_TOO_LARGE" => HttpStatusCode.RequestHeaderFieldsTooLarge,
                "UNAVAILABLE_FOR_LEGAL_REASONS" => HttpStatusCode.UnavailableForLegalReasons,
                "INTERNAL_SERVER_ERROR" => HttpStatusCode.InternalServerError,
                "NOT_IMPLEMENTED" => HttpStatusCode.NotImplemented,
                "BAD_GATEWAY" => HttpStatusCode.BadGateway,
                "SERVICE_UNAVAILABLE" => HttpStatusCode.ServiceUnavailable,
                "GATEWAY_TIMEOUT" => HttpStatusCode.GatewayTimeout,
                "HTTP_VERSION_NOT_SUPPORTED" => HttpStatusCode.HttpVersionNotSupported,
                "VARIANT_ALSO_NEGOTIATES" => HttpStatusCode.VariantAlsoNegotiates,
                "INSUFFICIENT_STORAGE" => HttpStatusCode.InsufficientStorage,
                "LOOP_DETECTED" => HttpStatusCode.LoopDetected,
                "NOT_EXTENDED" => HttpStatusCode.NotExtended,
                "NETWORK_AUTHENTICATION_REQUIRED" => HttpStatusCode.NetworkAuthenticationRequired,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum HttpStatusCode")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                HttpStatusCode.Continue => "CONTINUE",
                HttpStatusCode.SwitchingProtocols => "SWITCHING_PROTOCOLS",
                HttpStatusCode.Processing => "PROCESSING",
                HttpStatusCode.EarlyHints => "EARLY_HINTS",
                HttpStatusCode.Ok => "OK",
                HttpStatusCode.Created => "CREATED",
                HttpStatusCode.Accepted => "ACCEPTED",
                HttpStatusCode.NonAuthoritativeInformation => "NON_AUTHORITATIVE_INFORMATION",
                HttpStatusCode.NoContent => "NO_CONTENT",
                HttpStatusCode.ResetContent => "RESET_CONTENT",
                HttpStatusCode.PartialContent => "PARTIAL_CONTENT",
                HttpStatusCode.MultiStatus => "MULTI_STATUS",
                HttpStatusCode.AlreadyReported => "ALREADY_REPORTED",
                HttpStatusCode.ImUsed => "IM_USED",
                HttpStatusCode.MultipleChoices => "MULTIPLE_CHOICES",
                HttpStatusCode.MovedPermanently => "MOVED_PERMANENTLY",
                HttpStatusCode.Found => "FOUND",
                HttpStatusCode.SeeOther => "SEE_OTHER",
                HttpStatusCode.NotModified => "NOT_MODIFIED",
                HttpStatusCode.UseProxy => "USE_PROXY",
                HttpStatusCode.Unused => "UNUSED",
                HttpStatusCode.RedirectKeepVerb => "REDIRECT_KEEP_VERB",
                HttpStatusCode.PermanentRedirect => "PERMANENT_REDIRECT",
                HttpStatusCode.BadRequest => "BAD_REQUEST",
                HttpStatusCode.Unauthorized => "UNAUTHORIZED",
                HttpStatusCode.PaymentRequired => "PAYMENT_REQUIRED",
                HttpStatusCode.Forbidden => "FORBIDDEN",
                HttpStatusCode.NotFound => "NOT_FOUND",
                HttpStatusCode.MethodNotAllowed => "METHOD_NOT_ALLOWED",
                HttpStatusCode.NotAcceptable => "NOT_ACCEPTABLE",
                HttpStatusCode.ProxyAuthenticationRequired => "PROXY_AUTHENTICATION_REQUIRED",
                HttpStatusCode.RequestTimeout => "REQUEST_TIMEOUT",
                HttpStatusCode.Conflict => "CONFLICT",
                HttpStatusCode.Gone => "GONE",
                HttpStatusCode.LengthRequired => "LENGTH_REQUIRED",
                HttpStatusCode.PreconditionFailed => "PRECONDITION_FAILED",
                HttpStatusCode.RequestEntityTooLarge => "REQUEST_ENTITY_TOO_LARGE",
                HttpStatusCode.RequestUriTooLong => "REQUEST_URI_TOO_LONG",
                HttpStatusCode.UnsupportedMediaType => "UNSUPPORTED_MEDIA_TYPE",
                HttpStatusCode.RequestedRangeNotSatisfiable => "REQUESTED_RANGE_NOT_SATISFIABLE",
                HttpStatusCode.ExpectationFailed => "EXPECTATION_FAILED",
                HttpStatusCode.MisdirectedRequest => "MISDIRECTED_REQUEST",
                HttpStatusCode.UnprocessableEntity => "UNPROCESSABLE_ENTITY",
                HttpStatusCode.Locked => "LOCKED",
                HttpStatusCode.FailedDependency => "FAILED_DEPENDENCY",
                HttpStatusCode.UpgradeRequired => "UPGRADE_REQUIRED",
                HttpStatusCode.PreconditionRequired => "PRECONDITION_REQUIRED",
                HttpStatusCode.TooManyRequests => "TOO_MANY_REQUESTS",
                HttpStatusCode.RequestHeaderFieldsTooLarge => "REQUEST_HEADER_FIELDS_TOO_LARGE",
                HttpStatusCode.UnavailableForLegalReasons => "UNAVAILABLE_FOR_LEGAL_REASONS",
                HttpStatusCode.InternalServerError => "INTERNAL_SERVER_ERROR",
                HttpStatusCode.NotImplemented => "NOT_IMPLEMENTED",
                HttpStatusCode.BadGateway => "BAD_GATEWAY",
                HttpStatusCode.ServiceUnavailable => "SERVICE_UNAVAILABLE",
                HttpStatusCode.GatewayTimeout => "GATEWAY_TIMEOUT",
                HttpStatusCode.HttpVersionNotSupported => "HTTP_VERSION_NOT_SUPPORTED",
                HttpStatusCode.VariantAlsoNegotiates => "VARIANT_ALSO_NEGOTIATES",
                HttpStatusCode.InsufficientStorage => "INSUFFICIENT_STORAGE",
                HttpStatusCode.LoopDetected => "LOOP_DETECTED",
                HttpStatusCode.NotExtended => "NOT_EXTENDED",
                HttpStatusCode.NetworkAuthenticationRequired => "NETWORK_AUTHENTICATION_REQUIRED",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum HttpStatusCode value '{runtimeValue}' can't be converted to string")};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public enum Severity
    {
        Error,
        Warning,
        Info
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SeveritySerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, Severity>
    {
        public global::System.String TypeName => "Severity";

        public Severity Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "ERROR" => Severity.Error,
                "WARNING" => Severity.Warning,
                "INFO" => Severity.Info,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum Severity")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                Severity.Error => "ERROR",
                Severity.Warning => "WARNING",
                Severity.Info => "INFO",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum Severity value '{runtimeValue}' can't be converted to string")};
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateCustomer GraphQL operation
    /// <code>
    /// mutation CreateCustomer($input: CreateCustomerInput!) {
    ///   createCustomer(input: $input) {
    ///     __typename
    ///     ... on MutationResponseOfCustomerValidated {
    ///       message
    ///       statusCode
    ///       success
    ///     }
    ///     errors {
    ///       __typename
    ///       errorCode
    ///       propertyName
    ///       severity
    ///       errorMessage
    ///     }
    ///     data {
    ///       __typename
    ///       createdAt
    ///       isValid
    ///       customer {
    ///         __typename
    ///         calculateSize
    ///         id
    ///         details {
    ///           __typename
    ///           address
    ///           calculateSize
    ///           email
    ///           name
    ///           phone
    ///         }
    ///         ... on Customer {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomerMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateCustomerMutationDocument()
        {
        }

        public static CreateCustomerMutationDocument Instance { get; } = new CreateCustomerMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x43,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x28,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x43,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x28,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x4d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x52,
            0x65,
            0x73,
            0x70,
            0x6f,
            0x6e,
            0x73,
            0x65,
            0x4f,
            0x66,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x56,
            0x61,
            0x6c,
            0x69,
            0x64,
            0x61,
            0x74,
            0x65,
            0x64,
            0x20,
            0x7b,
            0x20,
            0x6d,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x43,
            0x6f,
            0x64,
            0x65,
            0x20,
            0x73,
            0x75,
            0x63,
            0x63,
            0x65,
            0x73,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x43,
            0x6f,
            0x64,
            0x65,
            0x20,
            0x70,
            0x72,
            0x6f,
            0x70,
            0x65,
            0x72,
            0x74,
            0x79,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x65,
            0x76,
            0x65,
            0x72,
            0x69,
            0x74,
            0x79,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x4d,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x64,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x64,
            0x41,
            0x74,
            0x20,
            0x69,
            0x73,
            0x56,
            0x61,
            0x6c,
            0x69,
            0x64,
            0x20,
            0x63,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x64,
            0x65,
            0x74,
            0x61,
            0x69,
            0x6c,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x61,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x70,
            0x68,
            0x6f,
            0x6e,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b390967d395b640d7dedb2d41857cb43");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateCustomer GraphQL operation
    /// <code>
    /// mutation CreateCustomer($input: CreateCustomerInput!) {
    ///   createCustomer(input: $input) {
    ///     __typename
    ///     ... on MutationResponseOfCustomerValidated {
    ///       message
    ///       statusCode
    ///       success
    ///     }
    ///     errors {
    ///       __typename
    ///       errorCode
    ///       propertyName
    ///       severity
    ///       errorMessage
    ///     }
    ///     data {
    ///       __typename
    ///       createdAt
    ///       isValid
    ///       customer {
    ///         __typename
    ///         calculateSize
    ///         id
    ///         details {
    ///           __typename
    ///           address
    ///           calculateSize
    ///           email
    ///           name
    ///           phone
    ///         }
    ///         ... on Customer {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomerMutation : global::ConnectiqApiNS.ICreateCustomerMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateCustomerResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _createCustomerInputFormatter;
        private readonly System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public CreateCustomerMutation(global::StrawberryShake.IOperationExecutor<ICreateCustomerResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _createCustomerInputFormatter = serializerResolver.GetInputValueFormatter("CreateCustomerInput");
        }

        private CreateCustomerMutation(global::StrawberryShake.IOperationExecutor<ICreateCustomerResult> operationExecutor, System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter createCustomerInputFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _createCustomerInputFormatter = createCustomerInputFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateCustomerResult);

        public global::ConnectiqApiNS.ICreateCustomerMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::ConnectiqApiNS.CreateCustomerMutation(_operationExecutor, _configure.Add(configure), _createCustomerInputFormatter);
        }

        public global::ConnectiqApiNS.ICreateCustomerMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::ConnectiqApiNS.ICreateCustomerMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateCustomerResult>> ExecuteAsync(global::ConnectiqApiNS.CreateCustomerInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateCustomerResult>> Watch(global::ConnectiqApiNS.CreateCustomerInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::ConnectiqApiNS.CreateCustomerInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateCustomerMutationDocument.Instance.Hash.Value, name: "CreateCustomer", document: CreateCustomerMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::ConnectiqApiNS.CreateCustomerInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _createCustomerInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateCustomer GraphQL operation
    /// <code>
    /// mutation CreateCustomer($input: CreateCustomerInput!) {
    ///   createCustomer(input: $input) {
    ///     __typename
    ///     ... on MutationResponseOfCustomerValidated {
    ///       message
    ///       statusCode
    ///       success
    ///     }
    ///     errors {
    ///       __typename
    ///       errorCode
    ///       propertyName
    ///       severity
    ///       errorMessage
    ///     }
    ///     data {
    ///       __typename
    ///       createdAt
    ///       isValid
    ///       customer {
    ///         __typename
    ///         calculateSize
    ///         id
    ///         details {
    ///           __typename
    ///           address
    ///           calculateSize
    ///           email
    ///           name
    ///           phone
    ///         }
    ///         ... on Customer {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ICreateCustomerMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::ConnectiqApiNS.ICreateCustomerMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::ConnectiqApiNS.ICreateCustomerMutation WithRequestUri(global::System.Uri requestUri);
        global::ConnectiqApiNS.ICreateCustomerMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateCustomerResult>> ExecuteAsync(global::ConnectiqApiNS.CreateCustomerInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateCustomerResult>> Watch(global::ConnectiqApiNS.CreateCustomerInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SoftDeleteCustomer GraphQL operation
    /// <code>
    /// mutation SoftDeleteCustomer($input: SoftDeleteCustomerInput!) {
    ///   softDelete(input: $input) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       customer {
    ///         __typename
    ///         calculateSize
    ///         id
    ///         ... on Customer {
    ///           id
    ///         }
    ///       }
    ///     }
    ///     ... on MutationResponseOfCustomerValidated {
    ///       message
    ///       statusCode
    ///       success
    ///       errors {
    ///         __typename
    ///         errorCode
    ///         errorMessage
    ///         propertyName
    ///         severity
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomerMutationDocument : global::StrawberryShake.IDocument
    {
        private SoftDeleteCustomerMutationDocument()
        {
        }

        public static SoftDeleteCustomerMutationDocument Instance { get; } = new SoftDeleteCustomerMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x53,
            0x6f,
            0x66,
            0x74,
            0x44,
            0x65,
            0x6c,
            0x65,
            0x74,
            0x65,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x28,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x53,
            0x6f,
            0x66,
            0x74,
            0x44,
            0x65,
            0x6c,
            0x65,
            0x74,
            0x65,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x6f,
            0x66,
            0x74,
            0x44,
            0x65,
            0x6c,
            0x65,
            0x74,
            0x65,
            0x28,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x4d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x52,
            0x65,
            0x73,
            0x70,
            0x6f,
            0x6e,
            0x73,
            0x65,
            0x4f,
            0x66,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x56,
            0x61,
            0x6c,
            0x69,
            0x64,
            0x61,
            0x74,
            0x65,
            0x64,
            0x20,
            0x7b,
            0x20,
            0x6d,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x43,
            0x6f,
            0x64,
            0x65,
            0x20,
            0x73,
            0x75,
            0x63,
            0x63,
            0x65,
            0x73,
            0x73,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x43,
            0x6f,
            0x64,
            0x65,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x4d,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x70,
            0x72,
            0x6f,
            0x70,
            0x65,
            0x72,
            0x74,
            0x79,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x65,
            0x76,
            0x65,
            0x72,
            0x69,
            0x74,
            0x79,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "aed09f396a6e1aaf10d5628f97bdc5ee");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SoftDeleteCustomer GraphQL operation
    /// <code>
    /// mutation SoftDeleteCustomer($input: SoftDeleteCustomerInput!) {
    ///   softDelete(input: $input) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       customer {
    ///         __typename
    ///         calculateSize
    ///         id
    ///         ... on Customer {
    ///           id
    ///         }
    ///       }
    ///     }
    ///     ... on MutationResponseOfCustomerValidated {
    ///       message
    ///       statusCode
    ///       success
    ///       errors {
    ///         __typename
    ///         errorCode
    ///         errorMessage
    ///         propertyName
    ///         severity
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomerMutation : global::ConnectiqApiNS.ISoftDeleteCustomerMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISoftDeleteCustomerResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _softDeleteCustomerInputFormatter;
        private readonly System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public SoftDeleteCustomerMutation(global::StrawberryShake.IOperationExecutor<ISoftDeleteCustomerResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _softDeleteCustomerInputFormatter = serializerResolver.GetInputValueFormatter("SoftDeleteCustomerInput");
        }

        private SoftDeleteCustomerMutation(global::StrawberryShake.IOperationExecutor<ISoftDeleteCustomerResult> operationExecutor, System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter softDeleteCustomerInputFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _softDeleteCustomerInputFormatter = softDeleteCustomerInputFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISoftDeleteCustomerResult);

        public global::ConnectiqApiNS.ISoftDeleteCustomerMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::ConnectiqApiNS.SoftDeleteCustomerMutation(_operationExecutor, _configure.Add(configure), _softDeleteCustomerInputFormatter);
        }

        public global::ConnectiqApiNS.ISoftDeleteCustomerMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::ConnectiqApiNS.ISoftDeleteCustomerMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISoftDeleteCustomerResult>> ExecuteAsync(global::ConnectiqApiNS.SoftDeleteCustomerInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISoftDeleteCustomerResult>> Watch(global::ConnectiqApiNS.SoftDeleteCustomerInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::ConnectiqApiNS.SoftDeleteCustomerInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SoftDeleteCustomerMutationDocument.Instance.Hash.Value, name: "SoftDeleteCustomer", document: SoftDeleteCustomerMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::ConnectiqApiNS.SoftDeleteCustomerInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _softDeleteCustomerInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the SoftDeleteCustomer GraphQL operation
    /// <code>
    /// mutation SoftDeleteCustomer($input: SoftDeleteCustomerInput!) {
    ///   softDelete(input: $input) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       customer {
    ///         __typename
    ///         calculateSize
    ///         id
    ///         ... on Customer {
    ///           id
    ///         }
    ///       }
    ///     }
    ///     ... on MutationResponseOfCustomerValidated {
    ///       message
    ///       statusCode
    ///       success
    ///       errors {
    ///         __typename
    ///         errorCode
    ///         errorMessage
    ///         propertyName
    ///         severity
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface ISoftDeleteCustomerMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::ConnectiqApiNS.ISoftDeleteCustomerMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::ConnectiqApiNS.ISoftDeleteCustomerMutation WithRequestUri(global::System.Uri requestUri);
        global::ConnectiqApiNS.ISoftDeleteCustomerMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISoftDeleteCustomerResult>> ExecuteAsync(global::ConnectiqApiNS.SoftDeleteCustomerInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISoftDeleteCustomerResult>> Watch(global::ConnectiqApiNS.SoftDeleteCustomerInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateCustomer GraphQL operation
    /// <code>
    /// mutation UpdateCustomer($input: UpdateCustomerInput!) {
    ///   updateCustomer(input: $input) {
    ///     __typename
    ///     ... on MutationResponseOfCustomerValidated {
    ///       message
    ///       statusCode
    ///       success
    ///       errors {
    ///         __typename
    ///         errorCode
    ///         errorMessage
    ///         propertyName
    ///         severity
    ///       }
    ///     }
    ///     data {
    ///       __typename
    ///       createdAt
    ///       isValid
    ///       customer {
    ///         __typename
    ///         calculateSize
    ///         id
    ///         details {
    ///           __typename
    ///           address
    ///           calculateSize
    ///           email
    ///           name
    ///           phone
    ///         }
    ///         ... on Customer {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomerMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateCustomerMutationDocument()
        {
        }

        public static UpdateCustomerMutationDocument Instance { get; } = new UpdateCustomerMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x28,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x55,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x28,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x4d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x52,
            0x65,
            0x73,
            0x70,
            0x6f,
            0x6e,
            0x73,
            0x65,
            0x4f,
            0x66,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x56,
            0x61,
            0x6c,
            0x69,
            0x64,
            0x61,
            0x74,
            0x65,
            0x64,
            0x20,
            0x7b,
            0x20,
            0x6d,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x43,
            0x6f,
            0x64,
            0x65,
            0x20,
            0x73,
            0x75,
            0x63,
            0x63,
            0x65,
            0x73,
            0x73,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x43,
            0x6f,
            0x64,
            0x65,
            0x20,
            0x65,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x4d,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x70,
            0x72,
            0x6f,
            0x70,
            0x65,
            0x72,
            0x74,
            0x79,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x65,
            0x76,
            0x65,
            0x72,
            0x69,
            0x74,
            0x79,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x64,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x64,
            0x41,
            0x74,
            0x20,
            0x69,
            0x73,
            0x56,
            0x61,
            0x6c,
            0x69,
            0x64,
            0x20,
            0x63,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x64,
            0x65,
            0x74,
            0x61,
            0x69,
            0x6c,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x61,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x70,
            0x68,
            0x6f,
            0x6e,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "1a81627218849712fe62dcd123f4fe85");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateCustomer GraphQL operation
    /// <code>
    /// mutation UpdateCustomer($input: UpdateCustomerInput!) {
    ///   updateCustomer(input: $input) {
    ///     __typename
    ///     ... on MutationResponseOfCustomerValidated {
    ///       message
    ///       statusCode
    ///       success
    ///       errors {
    ///         __typename
    ///         errorCode
    ///         errorMessage
    ///         propertyName
    ///         severity
    ///       }
    ///     }
    ///     data {
    ///       __typename
    ///       createdAt
    ///       isValid
    ///       customer {
    ///         __typename
    ///         calculateSize
    ///         id
    ///         details {
    ///           __typename
    ///           address
    ///           calculateSize
    ///           email
    ///           name
    ///           phone
    ///         }
    ///         ... on Customer {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomerMutation : global::ConnectiqApiNS.IUpdateCustomerMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateCustomerResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _updateCustomerInputFormatter;
        private readonly System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public UpdateCustomerMutation(global::StrawberryShake.IOperationExecutor<IUpdateCustomerResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _updateCustomerInputFormatter = serializerResolver.GetInputValueFormatter("UpdateCustomerInput");
        }

        private UpdateCustomerMutation(global::StrawberryShake.IOperationExecutor<IUpdateCustomerResult> operationExecutor, System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter updateCustomerInputFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _updateCustomerInputFormatter = updateCustomerInputFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateCustomerResult);

        public global::ConnectiqApiNS.IUpdateCustomerMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::ConnectiqApiNS.UpdateCustomerMutation(_operationExecutor, _configure.Add(configure), _updateCustomerInputFormatter);
        }

        public global::ConnectiqApiNS.IUpdateCustomerMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::ConnectiqApiNS.IUpdateCustomerMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateCustomerResult>> ExecuteAsync(global::ConnectiqApiNS.UpdateCustomerInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateCustomerResult>> Watch(global::ConnectiqApiNS.UpdateCustomerInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::ConnectiqApiNS.UpdateCustomerInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateCustomerMutationDocument.Instance.Hash.Value, name: "UpdateCustomer", document: UpdateCustomerMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::ConnectiqApiNS.UpdateCustomerInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _updateCustomerInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateCustomer GraphQL operation
    /// <code>
    /// mutation UpdateCustomer($input: UpdateCustomerInput!) {
    ///   updateCustomer(input: $input) {
    ///     __typename
    ///     ... on MutationResponseOfCustomerValidated {
    ///       message
    ///       statusCode
    ///       success
    ///       errors {
    ///         __typename
    ///         errorCode
    ///         errorMessage
    ///         propertyName
    ///         severity
    ///       }
    ///     }
    ///     data {
    ///       __typename
    ///       createdAt
    ///       isValid
    ///       customer {
    ///         __typename
    ///         calculateSize
    ///         id
    ///         details {
    ///           __typename
    ///           address
    ///           calculateSize
    ///           email
    ///           name
    ///           phone
    ///         }
    ///         ... on Customer {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IUpdateCustomerMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::ConnectiqApiNS.IUpdateCustomerMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::ConnectiqApiNS.IUpdateCustomerMutation WithRequestUri(global::System.Uri requestUri);
        global::ConnectiqApiNS.IUpdateCustomerMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateCustomerResult>> ExecuteAsync(global::ConnectiqApiNS.UpdateCustomerInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateCustomerResult>> Watch(global::ConnectiqApiNS.UpdateCustomerInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetAllCustomers GraphQL operation
    /// <code>
    /// query GetAllCustomers($input: GetAllFiltersInput!) {
    ///   allCustomers(input: $input) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       calculateSize
    ///       totalCount
    ///       customers {
    ///         __typename
    ///         calculateSize
    ///         createdAt
    ///         eventId
    ///         isActive
    ///         customer {
    ///           __typename
    ///           calculateSize
    ///           id
    ///           details {
    ///             __typename
    ///             address
    ///             calculateSize
    ///             email
    ///             name
    ///             phone
    ///           }
    ///           ... on Customer {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on QueryResponseOfGetCustomersResponse {
    ///       message
    ///       statusCode
    ///       success
    ///       data {
    ///         __typename
    ///         customers {
    ///           __typename
    ///           calculateSize
    ///           createdAt
    ///           eventId
    ///           isActive
    ///           customer {
    ///             __typename
    ///             calculateSize
    ///             id
    ///             details {
    ///               __typename
    ///               address
    ///               calculateSize
    ///               email
    ///               name
    ///               phone
    ///             }
    ///             ... on Customer {
    ///               id
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllCustomersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAllCustomersQueryDocument()
        {
        }

        public static GetAllCustomersQueryDocument Instance { get; } = new GetAllCustomersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x41,
            0x6c,
            0x6c,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x73,
            0x28,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x47,
            0x65,
            0x74,
            0x41,
            0x6c,
            0x6c,
            0x46,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x73,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x6c,
            0x6c,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x73,
            0x28,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x74,
            0x6f,
            0x74,
            0x61,
            0x6c,
            0x43,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x63,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x64,
            0x41,
            0x74,
            0x20,
            0x65,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x49,
            0x64,
            0x20,
            0x69,
            0x73,
            0x41,
            0x63,
            0x74,
            0x69,
            0x76,
            0x65,
            0x20,
            0x63,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x64,
            0x65,
            0x74,
            0x61,
            0x69,
            0x6c,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x61,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x70,
            0x68,
            0x6f,
            0x6e,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x52,
            0x65,
            0x73,
            0x70,
            0x6f,
            0x6e,
            0x73,
            0x65,
            0x4f,
            0x66,
            0x47,
            0x65,
            0x74,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x73,
            0x52,
            0x65,
            0x73,
            0x70,
            0x6f,
            0x6e,
            0x73,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x6d,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x43,
            0x6f,
            0x64,
            0x65,
            0x20,
            0x73,
            0x75,
            0x63,
            0x63,
            0x65,
            0x73,
            0x73,
            0x20,
            0x64,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x64,
            0x41,
            0x74,
            0x20,
            0x65,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x49,
            0x64,
            0x20,
            0x69,
            0x73,
            0x41,
            0x63,
            0x74,
            0x69,
            0x76,
            0x65,
            0x20,
            0x63,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x64,
            0x65,
            0x74,
            0x61,
            0x69,
            0x6c,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x61,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x70,
            0x68,
            0x6f,
            0x6e,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "fd787901c66b788bddd1a27b53eb0a82");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllCustomers GraphQL operation
    /// <code>
    /// query GetAllCustomers($input: GetAllFiltersInput!) {
    ///   allCustomers(input: $input) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       calculateSize
    ///       totalCount
    ///       customers {
    ///         __typename
    ///         calculateSize
    ///         createdAt
    ///         eventId
    ///         isActive
    ///         customer {
    ///           __typename
    ///           calculateSize
    ///           id
    ///           details {
    ///             __typename
    ///             address
    ///             calculateSize
    ///             email
    ///             name
    ///             phone
    ///           }
    ///           ... on Customer {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on QueryResponseOfGetCustomersResponse {
    ///       message
    ///       statusCode
    ///       success
    ///       data {
    ///         __typename
    ///         customers {
    ///           __typename
    ///           calculateSize
    ///           createdAt
    ///           eventId
    ///           isActive
    ///           customer {
    ///             __typename
    ///             calculateSize
    ///             id
    ///             details {
    ///               __typename
    ///               address
    ///               calculateSize
    ///               email
    ///               name
    ///               phone
    ///             }
    ///             ... on Customer {
    ///               id
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllCustomersQuery : global::ConnectiqApiNS.IGetAllCustomersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAllCustomersResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _getAllFiltersInputFormatter;
        private readonly System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetAllCustomersQuery(global::StrawberryShake.IOperationExecutor<IGetAllCustomersResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _getAllFiltersInputFormatter = serializerResolver.GetInputValueFormatter("GetAllFiltersInput");
        }

        private GetAllCustomersQuery(global::StrawberryShake.IOperationExecutor<IGetAllCustomersResult> operationExecutor, System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter getAllFiltersInputFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _getAllFiltersInputFormatter = getAllFiltersInputFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllCustomersResult);

        public global::ConnectiqApiNS.IGetAllCustomersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::ConnectiqApiNS.GetAllCustomersQuery(_operationExecutor, _configure.Add(configure), _getAllFiltersInputFormatter);
        }

        public global::ConnectiqApiNS.IGetAllCustomersQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::ConnectiqApiNS.IGetAllCustomersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllCustomersResult>> ExecuteAsync(global::ConnectiqApiNS.GetAllFiltersInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllCustomersResult>> Watch(global::ConnectiqApiNS.GetAllFiltersInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::ConnectiqApiNS.GetAllFiltersInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAllCustomersQueryDocument.Instance.Hash.Value, name: "GetAllCustomers", document: GetAllCustomersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::ConnectiqApiNS.GetAllFiltersInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _getAllFiltersInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllCustomers GraphQL operation
    /// <code>
    /// query GetAllCustomers($input: GetAllFiltersInput!) {
    ///   allCustomers(input: $input) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       calculateSize
    ///       totalCount
    ///       customers {
    ///         __typename
    ///         calculateSize
    ///         createdAt
    ///         eventId
    ///         isActive
    ///         customer {
    ///           __typename
    ///           calculateSize
    ///           id
    ///           details {
    ///             __typename
    ///             address
    ///             calculateSize
    ///             email
    ///             name
    ///             phone
    ///           }
    ///           ... on Customer {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on QueryResponseOfGetCustomersResponse {
    ///       message
    ///       statusCode
    ///       success
    ///       data {
    ///         __typename
    ///         customers {
    ///           __typename
    ///           calculateSize
    ///           createdAt
    ///           eventId
    ///           isActive
    ///           customer {
    ///             __typename
    ///             calculateSize
    ///             id
    ///             details {
    ///               __typename
    ///               address
    ///               calculateSize
    ///               email
    ///               name
    ///               phone
    ///             }
    ///             ... on Customer {
    ///               id
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetAllCustomersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::ConnectiqApiNS.IGetAllCustomersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::ConnectiqApiNS.IGetAllCustomersQuery WithRequestUri(global::System.Uri requestUri);
        global::ConnectiqApiNS.IGetAllCustomersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllCustomersResult>> ExecuteAsync(global::ConnectiqApiNS.GetAllFiltersInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllCustomersResult>> Watch(global::ConnectiqApiNS.GetAllFiltersInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetCustomerById GraphQL operation
    /// <code>
    /// query GetCustomerById($id: String!) {
    ///   customerById(input: { id: $id }) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       calculateSize
    ///       customerDto {
    ///         __typename
    ///         calculateSize
    ///         createdAt
    ///         eventId
    ///         isActive
    ///         customer {
    ///           __typename
    ///           calculateSize
    ///           id
    ///           details {
    ///             __typename
    ///             address
    ///             calculateSize
    ///             email
    ///             name
    ///             phone
    ///           }
    ///           ... on Customer {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on QueryResponseOfGetCustomerResponse {
    ///       message
    ///       statusCode
    ///       success
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCustomerByIdQueryDocument()
        {
        }

        public static GetCustomerByIdQueryDocument Instance { get; } = new GetCustomerByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x24,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x63,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x63,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x44,
            0x74,
            0x6f,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x64,
            0x41,
            0x74,
            0x20,
            0x65,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x49,
            0x64,
            0x20,
            0x69,
            0x73,
            0x41,
            0x63,
            0x74,
            0x69,
            0x76,
            0x65,
            0x20,
            0x63,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x64,
            0x65,
            0x74,
            0x61,
            0x69,
            0x6c,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x61,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x63,
            0x61,
            0x6c,
            0x63,
            0x75,
            0x6c,
            0x61,
            0x74,
            0x65,
            0x53,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x70,
            0x68,
            0x6f,
            0x6e,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x52,
            0x65,
            0x73,
            0x70,
            0x6f,
            0x6e,
            0x73,
            0x65,
            0x4f,
            0x66,
            0x47,
            0x65,
            0x74,
            0x43,
            0x75,
            0x73,
            0x74,
            0x6f,
            0x6d,
            0x65,
            0x72,
            0x52,
            0x65,
            0x73,
            0x70,
            0x6f,
            0x6e,
            0x73,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x6d,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x43,
            0x6f,
            0x64,
            0x65,
            0x20,
            0x73,
            0x75,
            0x63,
            0x63,
            0x65,
            0x73,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "80132f8acdf909d2c4be9549a455acc9");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCustomerById GraphQL operation
    /// <code>
    /// query GetCustomerById($id: String!) {
    ///   customerById(input: { id: $id }) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       calculateSize
    ///       customerDto {
    ///         __typename
    ///         calculateSize
    ///         createdAt
    ///         eventId
    ///         isActive
    ///         customer {
    ///           __typename
    ///           calculateSize
    ///           id
    ///           details {
    ///             __typename
    ///             address
    ///             calculateSize
    ///             email
    ///             name
    ///             phone
    ///           }
    ///           ... on Customer {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on QueryResponseOfGetCustomerResponse {
    ///       message
    ///       statusCode
    ///       success
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerByIdQuery : global::ConnectiqApiNS.IGetCustomerByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCustomerByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetCustomerByIdQuery(global::StrawberryShake.IOperationExecutor<IGetCustomerByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        private GetCustomerByIdQuery(global::StrawberryShake.IOperationExecutor<IGetCustomerByIdResult> operationExecutor, System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter @stringFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _stringFormatter = @stringFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCustomerByIdResult);

        public global::ConnectiqApiNS.IGetCustomerByIdQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::ConnectiqApiNS.GetCustomerByIdQuery(_operationExecutor, _configure.Add(configure), _stringFormatter);
        }

        public global::ConnectiqApiNS.IGetCustomerByIdQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::ConnectiqApiNS.IGetCustomerByIdQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCustomerByIdResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCustomerByIdResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCustomerByIdQueryDocument.Instance.Hash.Value, name: "GetCustomerById", document: GetCustomerByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCustomerById GraphQL operation
    /// <code>
    /// query GetCustomerById($id: String!) {
    ///   customerById(input: { id: $id }) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       calculateSize
    ///       customerDto {
    ///         __typename
    ///         calculateSize
    ///         createdAt
    ///         eventId
    ///         isActive
    ///         customer {
    ///           __typename
    ///           calculateSize
    ///           id
    ///           details {
    ///             __typename
    ///             address
    ///             calculateSize
    ///             email
    ///             name
    ///             phone
    ///           }
    ///           ... on Customer {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on QueryResponseOfGetCustomerResponse {
    ///       message
    ///       statusCode
    ///       success
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IGetCustomerByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::ConnectiqApiNS.IGetCustomerByIdQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::ConnectiqApiNS.IGetCustomerByIdQuery WithRequestUri(global::System.Uri requestUri);
        global::ConnectiqApiNS.IGetCustomerByIdQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCustomerByIdResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCustomerByIdResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ConnectiqApi GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class ConnectiqApi : global::ConnectiqApiNS.IConnectiqApi
    {
        private readonly global::ConnectiqApiNS.ICreateCustomerMutation _createCustomer;
        private readonly global::ConnectiqApiNS.ISoftDeleteCustomerMutation _softDeleteCustomer;
        private readonly global::ConnectiqApiNS.IUpdateCustomerMutation _updateCustomer;
        private readonly global::ConnectiqApiNS.IGetAllCustomersQuery _getAllCustomers;
        private readonly global::ConnectiqApiNS.IGetCustomerByIdQuery _getCustomerById;
        public ConnectiqApi(global::ConnectiqApiNS.ICreateCustomerMutation createCustomer, global::ConnectiqApiNS.ISoftDeleteCustomerMutation softDeleteCustomer, global::ConnectiqApiNS.IUpdateCustomerMutation updateCustomer, global::ConnectiqApiNS.IGetAllCustomersQuery getAllCustomers, global::ConnectiqApiNS.IGetCustomerByIdQuery getCustomerById)
        {
            _createCustomer = createCustomer ?? throw new global::System.ArgumentNullException(nameof(createCustomer));
            _softDeleteCustomer = softDeleteCustomer ?? throw new global::System.ArgumentNullException(nameof(softDeleteCustomer));
            _updateCustomer = updateCustomer ?? throw new global::System.ArgumentNullException(nameof(updateCustomer));
            _getAllCustomers = getAllCustomers ?? throw new global::System.ArgumentNullException(nameof(getAllCustomers));
            _getCustomerById = getCustomerById ?? throw new global::System.ArgumentNullException(nameof(getCustomerById));
        }

        public static global::System.String ClientName => "ConnectiqApi";
        public global::ConnectiqApiNS.ICreateCustomerMutation CreateCustomer => _createCustomer;
        public global::ConnectiqApiNS.ISoftDeleteCustomerMutation SoftDeleteCustomer => _softDeleteCustomer;
        public global::ConnectiqApiNS.IUpdateCustomerMutation UpdateCustomer => _updateCustomer;
        public global::ConnectiqApiNS.IGetAllCustomersQuery GetAllCustomers => _getAllCustomers;
        public global::ConnectiqApiNS.IGetCustomerByIdQuery GetCustomerById => _getCustomerById;
    }

    /// <summary>
    /// Represents the ConnectiqApi GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IConnectiqApi
    {
        global::ConnectiqApiNS.ICreateCustomerMutation CreateCustomer { get; }

        global::ConnectiqApiNS.ISoftDeleteCustomerMutation SoftDeleteCustomer { get; }

        global::ConnectiqApiNS.IUpdateCustomerMutation UpdateCustomer { get; }

        global::ConnectiqApiNS.IGetAllCustomersQuery GetAllCustomers { get; }

        global::ConnectiqApiNS.IGetCustomerByIdQuery GetCustomerById { get; }
    }
}

namespace ConnectiqApiNS.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CustomerEntity
    {
        public CustomerEntity(global::System.Int32 calculateSize = default !, global::System.String? id = default !, global::ConnectiqApiNS.State.CustomerDetailsData? details = default !)
        {
            CalculateSize = calculateSize;
            Id = id;
            Details = details;
        }

        public global::System.Int32 CalculateSize { get; }
        public global::System.String? Id { get; }
        public global::ConnectiqApiNS.State.CustomerDetailsData? Details { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomerResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.CreateCustomerResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, CreateCustomer_CreateCustomer_Data_Customer_Customer> _createCustomer_CreateCustomer_Data_Customer_CustomerFromCustomerEntityMapper;
        public CreateCustomerResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, CreateCustomer_CreateCustomer_Data_Customer_Customer> createCustomer_CreateCustomer_Data_Customer_CustomerFromCustomerEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _createCustomer_CreateCustomer_Data_Customer_CustomerFromCustomerEntityMapper = createCustomer_CreateCustomer_Data_Customer_CustomerFromCustomerEntityMapper ?? throw new global::System.ArgumentNullException(nameof(createCustomer_CreateCustomer_Data_Customer_CustomerFromCustomerEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ConnectiqApiNS.ICreateCustomerResult);

        public CreateCustomerResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateCustomerResultInfo info)
            {
                return new CreateCustomerResult(MapNonNullableICreateCustomer_CreateCustomer(info.CreateCustomer, snapshot));
            }

            throw new global::System.ArgumentException("CreateCustomerResultInfo expected.");
        }

        private global::ConnectiqApiNS.ICreateCustomer_CreateCustomer MapNonNullableICreateCustomer_CreateCustomer(global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ICreateCustomer_CreateCustomer? returnValue;
            if (data is global::ConnectiqApiNS.State.MutationResponseOfCustomerValidatedData mutationResponseOfCustomerValidated)
            {
                if (!mutationResponseOfCustomerValidated.StatusCode.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                if (!mutationResponseOfCustomerValidated.Success.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::ConnectiqApiNS.CreateCustomer_CreateCustomer_MutationResponseOfCustomerValidated(mutationResponseOfCustomerValidated.Message ?? throw new global::System.ArgumentNullException(), mutationResponseOfCustomerValidated.StatusCode!.Value, mutationResponseOfCustomerValidated.Success!.Value, MapNonNullableICreateCustomer_CreateCustomer_ErrorsNonNullableArray(mutationResponseOfCustomerValidated.Errors, snapshot), MapICreateCustomer_CreateCustomer_Data(mutationResponseOfCustomerValidated.Data, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Errors> MapNonNullableICreateCustomer_CreateCustomer_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.State.ValidationFailureData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var validationFailures = new global::System.Collections.Generic.List<global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Errors>();
            foreach (global::ConnectiqApiNS.State.ValidationFailureData child in list)
            {
                validationFailures.Add(MapNonNullableICreateCustomer_CreateCustomer_Errors(child, snapshot));
            }

            return validationFailures;
        }

        private global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Errors MapNonNullableICreateCustomer_CreateCustomer_Errors(global::ConnectiqApiNS.State.ValidationFailureData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ICreateCustomer_CreateCustomer_Errors returnValue = default !;
            if (data.__typename.Equals("ValidationFailure", global::System.StringComparison.Ordinal))
            {
                returnValue = new CreateCustomer_CreateCustomer_Errors_ValidationFailure(data.ErrorCode, data.PropertyName, data.Severity ?? throw new global::System.ArgumentNullException(), data.ErrorMessage);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data? MapICreateCustomer_CreateCustomer_Data(global::ConnectiqApiNS.State.CustomerValidatedData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateCustomer_CreateCustomer_Data returnValue = default !;
            if (data?.__typename.Equals("CustomerValidated", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateCustomer_CreateCustomer_Data_CustomerValidated(data.CreatedAt ?? throw new global::System.ArgumentNullException(), data.IsValid ?? throw new global::System.ArgumentNullException(), MapNonNullableICreateCustomer_CreateCustomer_Data_Customer(data.Customer ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data_Customer MapNonNullableICreateCustomer_CreateCustomer_Data_Customer(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Customer", global::System.StringComparison.Ordinal))
            {
                return _createCustomer_CreateCustomer_Data_Customer_CustomerFromCustomerEntityMapper.Map(snapshot.GetEntity<global::ConnectiqApiNS.State.CustomerEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data_Customer_Details? MapICreateCustomer_CreateCustomer_Data_Customer_Details(global::ConnectiqApiNS.State.CustomerDetailsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateCustomer_CreateCustomer_Data_Customer_Details returnValue = default !;
            if (data?.__typename.Equals("CustomerDetails", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateCustomer_CreateCustomer_Data_Customer_Details_CustomerDetails(data.Address, data.CalculateSize ?? throw new global::System.ArgumentNullException(), data.Email, data.Name, data.Phone);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomerResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateCustomerResultInfo(global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData createCustomer, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateCustomer = createCustomer;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData CreateCustomer { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateCustomerResultInfo(CreateCustomer, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomerResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.SoftDeleteCustomerResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, SoftDeleteCustomer_SoftDelete_Data_Customer_Customer> _softDeleteCustomer_SoftDelete_Data_Customer_CustomerFromCustomerEntityMapper;
        public SoftDeleteCustomerResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, SoftDeleteCustomer_SoftDelete_Data_Customer_Customer> softDeleteCustomer_SoftDelete_Data_Customer_CustomerFromCustomerEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _softDeleteCustomer_SoftDelete_Data_Customer_CustomerFromCustomerEntityMapper = softDeleteCustomer_SoftDelete_Data_Customer_CustomerFromCustomerEntityMapper ?? throw new global::System.ArgumentNullException(nameof(softDeleteCustomer_SoftDelete_Data_Customer_CustomerFromCustomerEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ConnectiqApiNS.ISoftDeleteCustomerResult);

        public SoftDeleteCustomerResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SoftDeleteCustomerResultInfo info)
            {
                return new SoftDeleteCustomerResult(MapNonNullableISoftDeleteCustomer_SoftDelete(info.SoftDelete, snapshot));
            }

            throw new global::System.ArgumentException("SoftDeleteCustomerResultInfo expected.");
        }

        private global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete MapNonNullableISoftDeleteCustomer_SoftDelete(global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISoftDeleteCustomer_SoftDelete? returnValue;
            if (data is global::ConnectiqApiNS.State.MutationResponseOfCustomerValidatedData mutationResponseOfCustomerValidated)
            {
                if (!mutationResponseOfCustomerValidated.StatusCode.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                if (!mutationResponseOfCustomerValidated.Success.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::ConnectiqApiNS.SoftDeleteCustomer_SoftDelete_MutationResponseOfCustomerValidated(MapISoftDeleteCustomer_SoftDelete_Data(mutationResponseOfCustomerValidated.Data, snapshot), mutationResponseOfCustomerValidated.Message ?? throw new global::System.ArgumentNullException(), mutationResponseOfCustomerValidated.StatusCode!.Value, mutationResponseOfCustomerValidated.Success!.Value, MapNonNullableISoftDeleteCustomer_SoftDelete_ErrorsNonNullableArray(mutationResponseOfCustomerValidated.Errors, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Data? MapISoftDeleteCustomer_SoftDelete_Data(global::ConnectiqApiNS.State.CustomerValidatedData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ISoftDeleteCustomer_SoftDelete_Data returnValue = default !;
            if (data?.__typename.Equals("CustomerValidated", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new SoftDeleteCustomer_SoftDelete_Data_CustomerValidated(MapNonNullableISoftDeleteCustomer_SoftDelete_Data_Customer(data.Customer ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Data_Customer MapNonNullableISoftDeleteCustomer_SoftDelete_Data_Customer(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Customer", global::System.StringComparison.Ordinal))
            {
                return _softDeleteCustomer_SoftDelete_Data_Customer_CustomerFromCustomerEntityMapper.Map(snapshot.GetEntity<global::ConnectiqApiNS.State.CustomerEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Errors> MapNonNullableISoftDeleteCustomer_SoftDelete_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.State.ValidationFailureData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var validationFailures = new global::System.Collections.Generic.List<global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Errors>();
            foreach (global::ConnectiqApiNS.State.ValidationFailureData child in list)
            {
                validationFailures.Add(MapNonNullableISoftDeleteCustomer_SoftDelete_Errors(child, snapshot));
            }

            return validationFailures;
        }

        private global::ConnectiqApiNS.ISoftDeleteCustomer_SoftDelete_Errors MapNonNullableISoftDeleteCustomer_SoftDelete_Errors(global::ConnectiqApiNS.State.ValidationFailureData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISoftDeleteCustomer_SoftDelete_Errors returnValue = default !;
            if (data.__typename.Equals("ValidationFailure", global::System.StringComparison.Ordinal))
            {
                returnValue = new SoftDeleteCustomer_SoftDelete_Errors_ValidationFailure(data.ErrorCode, data.ErrorMessage, data.PropertyName, data.Severity ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomerResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SoftDeleteCustomerResultInfo(global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData softDelete, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            SoftDelete = softDelete;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData SoftDelete { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SoftDeleteCustomerResultInfo(SoftDelete, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomerResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.UpdateCustomerResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, UpdateCustomer_UpdateCustomer_Data_Customer_Customer> _updateCustomer_UpdateCustomer_Data_Customer_CustomerFromCustomerEntityMapper;
        public UpdateCustomerResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, UpdateCustomer_UpdateCustomer_Data_Customer_Customer> updateCustomer_UpdateCustomer_Data_Customer_CustomerFromCustomerEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _updateCustomer_UpdateCustomer_Data_Customer_CustomerFromCustomerEntityMapper = updateCustomer_UpdateCustomer_Data_Customer_CustomerFromCustomerEntityMapper ?? throw new global::System.ArgumentNullException(nameof(updateCustomer_UpdateCustomer_Data_Customer_CustomerFromCustomerEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ConnectiqApiNS.IUpdateCustomerResult);

        public UpdateCustomerResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateCustomerResultInfo info)
            {
                return new UpdateCustomerResult(MapNonNullableIUpdateCustomer_UpdateCustomer(info.UpdateCustomer, snapshot));
            }

            throw new global::System.ArgumentException("UpdateCustomerResultInfo expected.");
        }

        private global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer MapNonNullableIUpdateCustomer_UpdateCustomer(global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IUpdateCustomer_UpdateCustomer? returnValue;
            if (data is global::ConnectiqApiNS.State.MutationResponseOfCustomerValidatedData mutationResponseOfCustomerValidated)
            {
                if (!mutationResponseOfCustomerValidated.StatusCode.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                if (!mutationResponseOfCustomerValidated.Success.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::ConnectiqApiNS.UpdateCustomer_UpdateCustomer_MutationResponseOfCustomerValidated(mutationResponseOfCustomerValidated.Message ?? throw new global::System.ArgumentNullException(), mutationResponseOfCustomerValidated.StatusCode!.Value, mutationResponseOfCustomerValidated.Success!.Value, MapNonNullableIUpdateCustomer_UpdateCustomer_ErrorsNonNullableArray(mutationResponseOfCustomerValidated.Errors, snapshot), MapIUpdateCustomer_UpdateCustomer_Data(mutationResponseOfCustomerValidated.Data, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Errors> MapNonNullableIUpdateCustomer_UpdateCustomer_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.State.ValidationFailureData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var validationFailures = new global::System.Collections.Generic.List<global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Errors>();
            foreach (global::ConnectiqApiNS.State.ValidationFailureData child in list)
            {
                validationFailures.Add(MapNonNullableIUpdateCustomer_UpdateCustomer_Errors(child, snapshot));
            }

            return validationFailures;
        }

        private global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Errors MapNonNullableIUpdateCustomer_UpdateCustomer_Errors(global::ConnectiqApiNS.State.ValidationFailureData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IUpdateCustomer_UpdateCustomer_Errors returnValue = default !;
            if (data.__typename.Equals("ValidationFailure", global::System.StringComparison.Ordinal))
            {
                returnValue = new UpdateCustomer_UpdateCustomer_Errors_ValidationFailure(data.ErrorCode, data.ErrorMessage, data.PropertyName, data.Severity ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data? MapIUpdateCustomer_UpdateCustomer_Data(global::ConnectiqApiNS.State.CustomerValidatedData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUpdateCustomer_UpdateCustomer_Data returnValue = default !;
            if (data?.__typename.Equals("CustomerValidated", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UpdateCustomer_UpdateCustomer_Data_CustomerValidated(data.CreatedAt ?? throw new global::System.ArgumentNullException(), data.IsValid ?? throw new global::System.ArgumentNullException(), MapNonNullableIUpdateCustomer_UpdateCustomer_Data_Customer(data.Customer ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data_Customer MapNonNullableIUpdateCustomer_UpdateCustomer_Data_Customer(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Customer", global::System.StringComparison.Ordinal))
            {
                return _updateCustomer_UpdateCustomer_Data_Customer_CustomerFromCustomerEntityMapper.Map(snapshot.GetEntity<global::ConnectiqApiNS.State.CustomerEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data_Customer_Details? MapIUpdateCustomer_UpdateCustomer_Data_Customer_Details(global::ConnectiqApiNS.State.CustomerDetailsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUpdateCustomer_UpdateCustomer_Data_Customer_Details returnValue = default !;
            if (data?.__typename.Equals("CustomerDetails", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UpdateCustomer_UpdateCustomer_Data_Customer_Details_CustomerDetails(data.Address, data.CalculateSize ?? throw new global::System.ArgumentNullException(), data.Email, data.Name, data.Phone);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomerResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateCustomerResultInfo(global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData updateCustomer, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpdateCustomer = updateCustomer;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData UpdateCustomer { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateCustomerResultInfo(UpdateCustomer, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllCustomersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.GetAllCustomersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, GetAllCustomers_AllCustomers_Data_Customers_Customer_Customer> _getAllCustomers_AllCustomers_Data_Customers_Customer_CustomerFromCustomerEntityMapper;
        public GetAllCustomersResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, GetAllCustomers_AllCustomers_Data_Customers_Customer_Customer> getAllCustomers_AllCustomers_Data_Customers_Customer_CustomerFromCustomerEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getAllCustomers_AllCustomers_Data_Customers_Customer_CustomerFromCustomerEntityMapper = getAllCustomers_AllCustomers_Data_Customers_Customer_CustomerFromCustomerEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAllCustomers_AllCustomers_Data_Customers_Customer_CustomerFromCustomerEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ConnectiqApiNS.IGetAllCustomersResult);

        public GetAllCustomersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAllCustomersResultInfo info)
            {
                return new GetAllCustomersResult(MapNonNullableIGetAllCustomers_AllCustomers(info.AllCustomers, snapshot));
            }

            throw new global::System.ArgumentException("GetAllCustomersResultInfo expected.");
        }

        private global::ConnectiqApiNS.IGetAllCustomers_AllCustomers MapNonNullableIGetAllCustomers_AllCustomers(global::ConnectiqApiNS.State.IIQueryResponseOfGetCustomersResponseData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetAllCustomers_AllCustomers? returnValue;
            if (data is global::ConnectiqApiNS.State.QueryResponseOfGetCustomersResponseData queryResponseOfGetCustomersResponse)
            {
                if (!queryResponseOfGetCustomersResponse.StatusCode.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                if (!queryResponseOfGetCustomersResponse.Success.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::ConnectiqApiNS.GetAllCustomers_AllCustomers_QueryResponseOfGetCustomersResponse(MapIGetAllCustomers_AllCustomers_Data(queryResponseOfGetCustomersResponse.Data, snapshot), queryResponseOfGetCustomersResponse.Message, queryResponseOfGetCustomersResponse.StatusCode!.Value, queryResponseOfGetCustomersResponse.Success!.Value);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data? MapIGetAllCustomers_AllCustomers_Data(global::ConnectiqApiNS.State.GetCustomersResponseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllCustomers_AllCustomers_Data returnValue = default !;
            if (data?.__typename.Equals("GetCustomersResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllCustomers_AllCustomers_Data_GetCustomersResponse(data.CalculateSize ?? throw new global::System.ArgumentNullException(), data.TotalCount ?? throw new global::System.ArgumentNullException(), MapIGetAllCustomers_AllCustomers_Data_CustomersArray(data.Customers, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers?>? MapIGetAllCustomers_AllCustomers_Data_CustomersArray(global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.State.CustomerDtoData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var customerDtos = new global::System.Collections.Generic.List<global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers?>();
            foreach (global::ConnectiqApiNS.State.CustomerDtoData? child in list)
            {
                customerDtos.Add(MapIGetAllCustomers_AllCustomers_Data_Customers(child, snapshot));
            }

            return customerDtos;
        }

        private global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers? MapIGetAllCustomers_AllCustomers_Data_Customers(global::ConnectiqApiNS.State.CustomerDtoData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllCustomers_AllCustomers_Data_Customers returnValue = default !;
            if (data?.__typename.Equals("CustomerDto", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllCustomers_AllCustomers_Data_Customers_CustomerDto(data.CalculateSize ?? throw new global::System.ArgumentNullException(), data.CreatedAt, data.EventId, data.IsActive ?? throw new global::System.ArgumentNullException(), MapIGetAllCustomers_AllCustomers_Data_Customers_Customer(data.Customer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers_Customer? MapIGetAllCustomers_AllCustomers_Data_Customers_Customer(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Customer", global::System.StringComparison.Ordinal))
            {
                return _getAllCustomers_AllCustomers_Data_Customers_Customer_CustomerFromCustomerEntityMapper.Map(snapshot.GetEntity<global::ConnectiqApiNS.State.CustomerEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details? MapIGetAllCustomers_AllCustomers_Data_Customers_Customer_Details(global::ConnectiqApiNS.State.CustomerDetailsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details returnValue = default !;
            if (data?.__typename.Equals("CustomerDetails", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllCustomers_AllCustomers_Data_Customers_Customer_Details_CustomerDetails(data.Address, data.CalculateSize ?? throw new global::System.ArgumentNullException(), data.Email, data.Name, data.Phone);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllCustomersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAllCustomersResultInfo(global::ConnectiqApiNS.State.IIQueryResponseOfGetCustomersResponseData allCustomers, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllCustomers = allCustomers;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ConnectiqApiNS.State.IIQueryResponseOfGetCustomersResponseData AllCustomers { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAllCustomersResultInfo(AllCustomers, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.GetCustomerByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, GetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer> _getCustomerById_CustomerById_Data_CustomerDto_Customer_CustomerFromCustomerEntityMapper;
        public GetCustomerByIdResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, GetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer> getCustomerById_CustomerById_Data_CustomerDto_Customer_CustomerFromCustomerEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getCustomerById_CustomerById_Data_CustomerDto_Customer_CustomerFromCustomerEntityMapper = getCustomerById_CustomerById_Data_CustomerDto_Customer_CustomerFromCustomerEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCustomerById_CustomerById_Data_CustomerDto_Customer_CustomerFromCustomerEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ConnectiqApiNS.IGetCustomerByIdResult);

        public GetCustomerByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCustomerByIdResultInfo info)
            {
                return new GetCustomerByIdResult(MapNonNullableIGetCustomerById_CustomerById(info.CustomerById, snapshot));
            }

            throw new global::System.ArgumentException("GetCustomerByIdResultInfo expected.");
        }

        private global::ConnectiqApiNS.IGetCustomerById_CustomerById MapNonNullableIGetCustomerById_CustomerById(global::ConnectiqApiNS.State.IIQueryResponseOfGetCustomerResponseData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCustomerById_CustomerById? returnValue;
            if (data is global::ConnectiqApiNS.State.QueryResponseOfGetCustomerResponseData queryResponseOfGetCustomerResponse)
            {
                if (!queryResponseOfGetCustomerResponse.StatusCode.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                if (!queryResponseOfGetCustomerResponse.Success.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::ConnectiqApiNS.GetCustomerById_CustomerById_QueryResponseOfGetCustomerResponse(MapIGetCustomerById_CustomerById_Data(queryResponseOfGetCustomerResponse.Data, snapshot), queryResponseOfGetCustomerResponse.Message, queryResponseOfGetCustomerResponse.StatusCode!.Value, queryResponseOfGetCustomerResponse.Success!.Value);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data? MapIGetCustomerById_CustomerById_Data(global::ConnectiqApiNS.State.GetCustomerResponseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomerById_CustomerById_Data returnValue = default !;
            if (data?.__typename.Equals("GetCustomerResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomerById_CustomerById_Data_GetCustomerResponse(data.CalculateSize ?? throw new global::System.ArgumentNullException(), MapIGetCustomerById_CustomerById_Data_CustomerDto(data.CustomerDto, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto? MapIGetCustomerById_CustomerById_Data_CustomerDto(global::ConnectiqApiNS.State.CustomerDtoData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomerById_CustomerById_Data_CustomerDto returnValue = default !;
            if (data?.__typename.Equals("CustomerDto", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomerById_CustomerById_Data_CustomerDto_CustomerDto(data.CalculateSize ?? throw new global::System.ArgumentNullException(), data.CreatedAt, data.EventId, data.IsActive ?? throw new global::System.ArgumentNullException(), MapIGetCustomerById_CustomerById_Data_CustomerDto_Customer(data.Customer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto_Customer? MapIGetCustomerById_CustomerById_Data_CustomerDto_Customer(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Customer", global::System.StringComparison.Ordinal))
            {
                return _getCustomerById_CustomerById_Data_CustomerDto_Customer_CustomerFromCustomerEntityMapper.Map(snapshot.GetEntity<global::ConnectiqApiNS.State.CustomerEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details? MapIGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details(global::ConnectiqApiNS.State.CustomerDetailsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details returnValue = default !;
            if (data?.__typename.Equals("CustomerDetails", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomerById_CustomerById_Data_CustomerDto_Customer_Details_CustomerDetails(data.Address, data.CalculateSize ?? throw new global::System.ArgumentNullException(), data.Email, data.Name, data.Phone);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCustomerByIdResultInfo(global::ConnectiqApiNS.State.IIQueryResponseOfGetCustomerResponseData customerById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CustomerById = customerById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ConnectiqApiNS.State.IIQueryResponseOfGetCustomerResponseData CustomerById { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCustomerByIdResultInfo(CustomerById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    internal interface ICreateCustomerInputInfo
    {
        global::System.Boolean IsDetailsSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    internal interface ICustomerDetailsInputInfo
    {
        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsAddressSet { get; }

        global::System.Boolean IsPhoneSet { get; }

        global::System.Boolean IsEmailSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    internal interface ISoftDeleteCustomerInputInfo
    {
        global::System.Boolean IsIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    internal interface IUpdateCustomerInputInfo
    {
        global::System.Boolean IsCustomerSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    internal interface ICustomerInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsDetailsSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    internal interface IGetAllFiltersInputInfo
    {
        global::System.Boolean IsFiltersSet { get; }

        global::System.Boolean IsPageSet { get; }

        global::System.Boolean IsPageSizeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    internal interface ICustomerFiltersInputInfo
    {
        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsAddressSet { get; }

        global::System.Boolean IsEmailSet { get; }

        global::System.Boolean IsPhoneSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomerBuilder : global::StrawberryShake.OperationResultBuilder<global::ConnectiqApiNS.ICreateCustomerResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::ConnectiqApiNS.HttpStatusCode> _httpStatusCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::ConnectiqApiNS.Severity> _severityParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public CreateCustomerBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.ICreateCustomerResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _httpStatusCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::ConnectiqApiNS.HttpStatusCode>("HttpStatusCode") ?? throw new global::System.ArgumentException("No serializer for type `HttpStatusCode` found.");
            _severityParser = serializerResolver.GetLeafValueParser<global::System.String, global::ConnectiqApiNS.Severity>("Severity") ?? throw new global::System.ArgumentException("No serializer for type `Severity` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.ICreateCustomerResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData createCustomerId = default !;
            _entityStore.Update(session =>
            {
                createCustomerId = Deserialize_NonNullableICreateCustomer_CreateCustomer(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createCustomer"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new CreateCustomerResultInfo(createCustomerId, entityIds, snapshot.Version);
        }

        private global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData Deserialize_NonNullableICreateCustomer_CreateCustomer(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("MutationResponseOfCustomerValidated", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.MutationResponseOfCustomerValidatedData(typename, message: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")), statusCode: Deserialize_NonNullableHttpStatusCode(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "statusCode")), success: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")), errors: Deserialize_NonNullableICreateCustomer_CreateCustomer_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")), data: Deserialize_ICreateCustomer_CreateCustomer_Data(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::ConnectiqApiNS.HttpStatusCode Deserialize_NonNullableHttpStatusCode(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _httpStatusCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.State.ValidationFailureData> Deserialize_NonNullableICreateCustomer_CreateCustomer_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var validationFailures = new global::System.Collections.Generic.List<global::ConnectiqApiNS.State.ValidationFailureData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                validationFailures.Add(Deserialize_NonNullableICreateCustomer_CreateCustomer_Errors(child));
            }

            return validationFailures;
        }

        private global::ConnectiqApiNS.State.ValidationFailureData Deserialize_NonNullableICreateCustomer_CreateCustomer_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationFailure", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.ValidationFailureData(typename, errorCode: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorCode")), propertyName: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyName")), severity: Deserialize_NonNullableSeverity(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "severity")), errorMessage: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessage")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::ConnectiqApiNS.Severity Deserialize_NonNullableSeverity(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _severityParser.Parse(obj.Value.GetString()!);
        }

        private global::ConnectiqApiNS.State.CustomerValidatedData? Deserialize_ICreateCustomer_CreateCustomer_Data(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CustomerValidated", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.CustomerValidatedData(typename, createdAt: Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), isValid: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isValid")), customer: Update_NonNullableICreateCustomer_CreateCustomer_Data_CustomerEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "customer"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId Update_NonNullableICreateCustomer_CreateCustomer_Data_CustomerEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Customer", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ConnectiqApiNS.State.CustomerEntity? entity))
                {
                    session.SetEntity(entityId, new global::ConnectiqApiNS.State.CustomerEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_ICreateCustomer_CreateCustomer_Data_Customer_Details(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::ConnectiqApiNS.State.CustomerEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_ICreateCustomer_CreateCustomer_Data_Customer_Details(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::ConnectiqApiNS.State.CustomerDetailsData? Deserialize_ICreateCustomer_CreateCustomer_Data_Customer_Details(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CustomerDetails", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.CustomerDetailsData(typename, address: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), calculateSize: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), email: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), name: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), phone: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phone")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomerBuilder : global::StrawberryShake.OperationResultBuilder<global::ConnectiqApiNS.ISoftDeleteCustomerResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::ConnectiqApiNS.HttpStatusCode> _httpStatusCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::ConnectiqApiNS.Severity> _severityParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public SoftDeleteCustomerBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.ISoftDeleteCustomerResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _httpStatusCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::ConnectiqApiNS.HttpStatusCode>("HttpStatusCode") ?? throw new global::System.ArgumentException("No serializer for type `HttpStatusCode` found.");
            _severityParser = serializerResolver.GetLeafValueParser<global::System.String, global::ConnectiqApiNS.Severity>("Severity") ?? throw new global::System.ArgumentException("No serializer for type `Severity` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.ISoftDeleteCustomerResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData softDeleteId = default !;
            _entityStore.Update(session =>
            {
                softDeleteId = Deserialize_NonNullableISoftDeleteCustomer_SoftDelete(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "softDelete"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new SoftDeleteCustomerResultInfo(softDeleteId, entityIds, snapshot.Version);
        }

        private global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData Deserialize_NonNullableISoftDeleteCustomer_SoftDelete(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("MutationResponseOfCustomerValidated", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.MutationResponseOfCustomerValidatedData(typename, data: Deserialize_ISoftDeleteCustomer_SoftDelete_Data(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data"), entityIds), message: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")), statusCode: Deserialize_NonNullableHttpStatusCode(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "statusCode")), success: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")), errors: Deserialize_NonNullableISoftDeleteCustomer_SoftDelete_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConnectiqApiNS.State.CustomerValidatedData? Deserialize_ISoftDeleteCustomer_SoftDelete_Data(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CustomerValidated", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.CustomerValidatedData(typename, customer: Update_NonNullableISoftDeleteCustomer_SoftDelete_Data_CustomerEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "customer"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId Update_NonNullableISoftDeleteCustomer_SoftDelete_Data_CustomerEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Customer", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ConnectiqApiNS.State.CustomerEntity? entity))
                {
                    session.SetEntity(entityId, new global::ConnectiqApiNS.State.CustomerEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Details));
                }
                else
                {
                    session.SetEntity(entityId, new global::ConnectiqApiNS.State.CustomerEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::ConnectiqApiNS.HttpStatusCode Deserialize_NonNullableHttpStatusCode(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _httpStatusCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.State.ValidationFailureData> Deserialize_NonNullableISoftDeleteCustomer_SoftDelete_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var validationFailures = new global::System.Collections.Generic.List<global::ConnectiqApiNS.State.ValidationFailureData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                validationFailures.Add(Deserialize_NonNullableISoftDeleteCustomer_SoftDelete_Errors(child));
            }

            return validationFailures;
        }

        private global::ConnectiqApiNS.State.ValidationFailureData Deserialize_NonNullableISoftDeleteCustomer_SoftDelete_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationFailure", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.ValidationFailureData(typename, errorCode: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorCode")), errorMessage: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessage")), propertyName: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyName")), severity: Deserialize_NonNullableSeverity(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "severity")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConnectiqApiNS.Severity Deserialize_NonNullableSeverity(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _severityParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomerBuilder : global::StrawberryShake.OperationResultBuilder<global::ConnectiqApiNS.IUpdateCustomerResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::ConnectiqApiNS.HttpStatusCode> _httpStatusCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::ConnectiqApiNS.Severity> _severityParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public UpdateCustomerBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.IUpdateCustomerResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _httpStatusCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::ConnectiqApiNS.HttpStatusCode>("HttpStatusCode") ?? throw new global::System.ArgumentException("No serializer for type `HttpStatusCode` found.");
            _severityParser = serializerResolver.GetLeafValueParser<global::System.String, global::ConnectiqApiNS.Severity>("Severity") ?? throw new global::System.ArgumentException("No serializer for type `Severity` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.IUpdateCustomerResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData updateCustomerId = default !;
            _entityStore.Update(session =>
            {
                updateCustomerId = Deserialize_NonNullableIUpdateCustomer_UpdateCustomer(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updateCustomer"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new UpdateCustomerResultInfo(updateCustomerId, entityIds, snapshot.Version);
        }

        private global::ConnectiqApiNS.State.IIMutationResponseOfCustomerValidatedData Deserialize_NonNullableIUpdateCustomer_UpdateCustomer(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("MutationResponseOfCustomerValidated", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.MutationResponseOfCustomerValidatedData(typename, message: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")), statusCode: Deserialize_NonNullableHttpStatusCode(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "statusCode")), success: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")), errors: Deserialize_NonNullableIUpdateCustomer_UpdateCustomer_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")), data: Deserialize_IUpdateCustomer_UpdateCustomer_Data(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::ConnectiqApiNS.HttpStatusCode Deserialize_NonNullableHttpStatusCode(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _httpStatusCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.State.ValidationFailureData> Deserialize_NonNullableIUpdateCustomer_UpdateCustomer_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var validationFailures = new global::System.Collections.Generic.List<global::ConnectiqApiNS.State.ValidationFailureData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                validationFailures.Add(Deserialize_NonNullableIUpdateCustomer_UpdateCustomer_Errors(child));
            }

            return validationFailures;
        }

        private global::ConnectiqApiNS.State.ValidationFailureData Deserialize_NonNullableIUpdateCustomer_UpdateCustomer_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationFailure", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.ValidationFailureData(typename, errorCode: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorCode")), errorMessage: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessage")), propertyName: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyName")), severity: Deserialize_NonNullableSeverity(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "severity")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::ConnectiqApiNS.Severity Deserialize_NonNullableSeverity(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _severityParser.Parse(obj.Value.GetString()!);
        }

        private global::ConnectiqApiNS.State.CustomerValidatedData? Deserialize_IUpdateCustomer_UpdateCustomer_Data(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CustomerValidated", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.CustomerValidatedData(typename, createdAt: Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), isValid: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isValid")), customer: Update_NonNullableIUpdateCustomer_UpdateCustomer_Data_CustomerEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "customer"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId Update_NonNullableIUpdateCustomer_UpdateCustomer_Data_CustomerEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Customer", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ConnectiqApiNS.State.CustomerEntity? entity))
                {
                    session.SetEntity(entityId, new global::ConnectiqApiNS.State.CustomerEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_IUpdateCustomer_UpdateCustomer_Data_Customer_Details(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::ConnectiqApiNS.State.CustomerEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_IUpdateCustomer_UpdateCustomer_Data_Customer_Details(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::ConnectiqApiNS.State.CustomerDetailsData? Deserialize_IUpdateCustomer_UpdateCustomer_Data_Customer_Details(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CustomerDetails", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.CustomerDetailsData(typename, address: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), calculateSize: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), email: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), name: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), phone: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phone")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllCustomersBuilder : global::StrawberryShake.OperationResultBuilder<global::ConnectiqApiNS.IGetAllCustomersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::ConnectiqApiNS.HttpStatusCode> _httpStatusCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetAllCustomersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.IGetAllCustomersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _httpStatusCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::ConnectiqApiNS.HttpStatusCode>("HttpStatusCode") ?? throw new global::System.ArgumentException("No serializer for type `HttpStatusCode` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.IGetAllCustomersResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::ConnectiqApiNS.State.IIQueryResponseOfGetCustomersResponseData allCustomersId = default !;
            _entityStore.Update(session =>
            {
                allCustomersId = Deserialize_NonNullableIGetAllCustomers_AllCustomers(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allCustomers"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetAllCustomersResultInfo(allCustomersId, entityIds, snapshot.Version);
        }

        private global::ConnectiqApiNS.State.IIQueryResponseOfGetCustomersResponseData Deserialize_NonNullableIGetAllCustomers_AllCustomers(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("QueryResponseOfGetCustomersResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.QueryResponseOfGetCustomersResponseData(typename, data: Deserialize_IGetAllCustomers_AllCustomers_Data(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data"), entityIds), message: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")), statusCode: Deserialize_NonNullableHttpStatusCode(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "statusCode")), success: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConnectiqApiNS.State.GetCustomersResponseData? Deserialize_IGetAllCustomers_AllCustomers_Data(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GetCustomersResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.GetCustomersResponseData(typename, calculateSize: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), totalCount: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")), customers: Deserialize_IGetAllCustomers_AllCustomers_Data_CustomersArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "customers"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.State.CustomerDtoData?>? Deserialize_IGetAllCustomers_AllCustomers_Data_CustomersArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var customerDtos = new global::System.Collections.Generic.List<global::ConnectiqApiNS.State.CustomerDtoData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                customerDtos.Add(Deserialize_IGetAllCustomers_AllCustomers_Data_Customers(session, child, entityIds));
            }

            return customerDtos;
        }

        private global::ConnectiqApiNS.State.CustomerDtoData? Deserialize_IGetAllCustomers_AllCustomers_Data_Customers(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CustomerDto", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.CustomerDtoData(typename, calculateSize: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), createdAt: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), eventId: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eventId")), isActive: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isActive")), customer: Update_IGetAllCustomers_AllCustomers_Data_Customers_CustomerEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "customer"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::StrawberryShake.EntityId? Update_IGetAllCustomers_AllCustomers_Data_Customers_CustomerEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Customer", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ConnectiqApiNS.State.CustomerEntity? entity))
                {
                    session.SetEntity(entityId, new global::ConnectiqApiNS.State.CustomerEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::ConnectiqApiNS.State.CustomerEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConnectiqApiNS.State.CustomerDetailsData? Deserialize_IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CustomerDetails", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.CustomerDetailsData(typename, address: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), calculateSize: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), email: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), name: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), phone: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phone")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConnectiqApiNS.HttpStatusCode Deserialize_NonNullableHttpStatusCode(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _httpStatusCodeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerByIdBuilder : global::StrawberryShake.OperationResultBuilder<global::ConnectiqApiNS.IGetCustomerByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::ConnectiqApiNS.HttpStatusCode> _httpStatusCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetCustomerByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.IGetCustomerByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _httpStatusCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::ConnectiqApiNS.HttpStatusCode>("HttpStatusCode") ?? throw new global::System.ArgumentException("No serializer for type `HttpStatusCode` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.IGetCustomerByIdResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::ConnectiqApiNS.State.IIQueryResponseOfGetCustomerResponseData customerByIdId = default !;
            _entityStore.Update(session =>
            {
                customerByIdId = Deserialize_NonNullableIGetCustomerById_CustomerById(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "customerById"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetCustomerByIdResultInfo(customerByIdId, entityIds, snapshot.Version);
        }

        private global::ConnectiqApiNS.State.IIQueryResponseOfGetCustomerResponseData Deserialize_NonNullableIGetCustomerById_CustomerById(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("QueryResponseOfGetCustomerResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.QueryResponseOfGetCustomerResponseData(typename, data: Deserialize_IGetCustomerById_CustomerById_Data(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data"), entityIds), message: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")), statusCode: Deserialize_NonNullableHttpStatusCode(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "statusCode")), success: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConnectiqApiNS.State.GetCustomerResponseData? Deserialize_IGetCustomerById_CustomerById_Data(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GetCustomerResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.GetCustomerResponseData(typename, calculateSize: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), customerDto: Deserialize_IGetCustomerById_CustomerById_Data_CustomerDto(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "customerDto"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::ConnectiqApiNS.State.CustomerDtoData? Deserialize_IGetCustomerById_CustomerById_Data_CustomerDto(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CustomerDto", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.CustomerDtoData(typename, calculateSize: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), createdAt: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), eventId: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eventId")), isActive: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isActive")), customer: Update_IGetCustomerById_CustomerById_Data_CustomerDto_CustomerEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "customer"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::StrawberryShake.EntityId? Update_IGetCustomerById_CustomerById_Data_CustomerDto_CustomerEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Customer", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ConnectiqApiNS.State.CustomerEntity? entity))
                {
                    session.SetEntity(entityId, new global::ConnectiqApiNS.State.CustomerEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::ConnectiqApiNS.State.CustomerEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConnectiqApiNS.State.CustomerDetailsData? Deserialize_IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CustomerDetails", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConnectiqApiNS.State.CustomerDetailsData(typename, address: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), calculateSize: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "calculateSize")), email: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), name: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), phone: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phone")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConnectiqApiNS.HttpStatusCode Deserialize_NonNullableHttpStatusCode(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _httpStatusCodeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IIMutationResponseOfCustomerValidatedData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class MutationResponseOfCustomerValidatedData : IIMutationResponseOfCustomerValidatedData
    {
        public MutationResponseOfCustomerValidatedData(global::System.String __typename, global::System.String? message = default !, global::ConnectiqApiNS.HttpStatusCode? statusCode = default !, global::System.Boolean? success = default !, global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.State.ValidationFailureData>? errors = default !, global::ConnectiqApiNS.State.CustomerValidatedData? data = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Message = message;
            StatusCode = statusCode;
            Success = success;
            Errors = errors;
            Data = data;
        }

        public global::System.String __typename { get; }
        public global::System.String? Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode? StatusCode { get; }
        public global::System.Boolean? Success { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.State.ValidationFailureData>? Errors { get; }
        ///<summary>The validated customer data.</summary>
        public global::ConnectiqApiNS.State.CustomerValidatedData? Data { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class ValidationFailureData
    {
        public ValidationFailureData(global::System.String __typename, global::System.String? errorCode = default !, global::System.String? propertyName = default !, global::ConnectiqApiNS.Severity? severity = default !, global::System.String? errorMessage = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ErrorCode = errorCode;
            PropertyName = propertyName;
            Severity = severity;
            ErrorMessage = errorMessage;
        }

        public global::System.String __typename { get; }
        public global::System.String? ErrorCode { get; }
        public global::System.String? PropertyName { get; }
        public global::ConnectiqApiNS.Severity? Severity { get; }
        public global::System.String? ErrorMessage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CustomerValidatedData
    {
        public CustomerValidatedData(global::System.String __typename, global::System.DateTimeOffset? createdAt = default !, global::System.Boolean? isValid = default !, global::StrawberryShake.EntityId? customer = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CreatedAt = createdAt;
            IsValid = isValid;
            Customer = customer;
        }

        public global::System.String __typename { get; }
        public global::System.DateTimeOffset? CreatedAt { get; }
        public global::System.Boolean? IsValid { get; }
        public global::StrawberryShake.EntityId? Customer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CustomerDetailsData
    {
        public CustomerDetailsData(global::System.String __typename, global::System.String? address = default !, global::System.Int32? calculateSize = default !, global::System.String? email = default !, global::System.String? name = default !, global::System.String? phone = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Address = address;
            CalculateSize = calculateSize;
            Email = email;
            Name = name;
            Phone = phone;
        }

        public global::System.String __typename { get; }
        public global::System.String? Address { get; }
        public global::System.Int32? CalculateSize { get; }
        public global::System.String? Email { get; }
        public global::System.String? Name { get; }
        public global::System.String? Phone { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IIQueryResponseOfGetCustomersResponseData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class QueryResponseOfGetCustomersResponseData : IIQueryResponseOfGetCustomersResponseData
    {
        public QueryResponseOfGetCustomersResponseData(global::System.String __typename, global::ConnectiqApiNS.State.GetCustomersResponseData? data = default !, global::System.String? message = default !, global::ConnectiqApiNS.HttpStatusCode? statusCode = default !, global::System.Boolean? success = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Data = data;
            Message = message;
            StatusCode = statusCode;
            Success = success;
        }

        public global::System.String __typename { get; }
        ///<summary>The customer data.</summary>
        public global::ConnectiqApiNS.State.GetCustomersResponseData? Data { get; }
        public global::System.String? Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode? StatusCode { get; }
        public global::System.Boolean? Success { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomersResponseData
    {
        public GetCustomersResponseData(global::System.String __typename, global::System.Int32? calculateSize = default !, global::System.Int32? totalCount = default !, global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.State.CustomerDtoData?>? customers = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CalculateSize = calculateSize;
            TotalCount = totalCount;
            Customers = customers;
        }

        public global::System.String __typename { get; }
        public global::System.Int32? CalculateSize { get; }
        public global::System.Int32? TotalCount { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ConnectiqApiNS.State.CustomerDtoData?>? Customers { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CustomerDtoData
    {
        public CustomerDtoData(global::System.String __typename, global::System.Int32? calculateSize = default !, global::System.String? createdAt = default !, global::System.String? eventId = default !, global::System.Boolean? isActive = default !, global::StrawberryShake.EntityId? customer = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CalculateSize = calculateSize;
            CreatedAt = createdAt;
            EventId = eventId;
            IsActive = isActive;
            Customer = customer;
        }

        public global::System.String __typename { get; }
        public global::System.Int32? CalculateSize { get; }
        public global::System.String? CreatedAt { get; }
        public global::System.String? EventId { get; }
        public global::System.Boolean? IsActive { get; }
        public global::StrawberryShake.EntityId? Customer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial interface IIQueryResponseOfGetCustomerResponseData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class QueryResponseOfGetCustomerResponseData : IIQueryResponseOfGetCustomerResponseData
    {
        public QueryResponseOfGetCustomerResponseData(global::System.String __typename, global::ConnectiqApiNS.State.GetCustomerResponseData? data = default !, global::System.String? message = default !, global::ConnectiqApiNS.HttpStatusCode? statusCode = default !, global::System.Boolean? success = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Data = data;
            Message = message;
            StatusCode = statusCode;
            Success = success;
        }

        public global::System.String __typename { get; }
        ///<summary>The validated customer data.</summary>
        public global::ConnectiqApiNS.State.GetCustomerResponseData? Data { get; }
        public global::System.String? Message { get; }
        public global::ConnectiqApiNS.HttpStatusCode? StatusCode { get; }
        public global::System.Boolean? Success { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerResponseData
    {
        public GetCustomerResponseData(global::System.String __typename, global::System.Int32? calculateSize = default !, global::ConnectiqApiNS.State.CustomerDtoData? customerDto = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CalculateSize = calculateSize;
            CustomerDto = customerDto;
        }

        public global::System.String __typename { get; }
        public global::System.Int32? CalculateSize { get; }
        public global::ConnectiqApiNS.State.CustomerDtoData? CustomerDto { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class CreateCustomer_CreateCustomer_Data_Customer_CustomerFromCustomerEntityMapper : global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, CreateCustomer_CreateCustomer_Data_Customer_Customer>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateCustomer_CreateCustomer_Data_Customer_CustomerFromCustomerEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CreateCustomer_CreateCustomer_Data_Customer_Customer Map(global::ConnectiqApiNS.State.CustomerEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CreateCustomer_CreateCustomer_Data_Customer_Customer(entity.CalculateSize, entity.Id, MapICreateCustomer_CreateCustomer_Data_Customer_Details(entity.Details, snapshot));
        }

        private global::ConnectiqApiNS.ICreateCustomer_CreateCustomer_Data_Customer_Details? MapICreateCustomer_CreateCustomer_Data_Customer_Details(global::ConnectiqApiNS.State.CustomerDetailsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateCustomer_CreateCustomer_Data_Customer_Details returnValue = default !;
            if (data?.__typename.Equals("CustomerDetails", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateCustomer_CreateCustomer_Data_Customer_Details_CustomerDetails(data.Address, data.CalculateSize ?? throw new global::System.ArgumentNullException(), data.Email, data.Name, data.Phone);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class SoftDeleteCustomer_SoftDelete_Data_Customer_CustomerFromCustomerEntityMapper : global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, SoftDeleteCustomer_SoftDelete_Data_Customer_Customer>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SoftDeleteCustomer_SoftDelete_Data_Customer_CustomerFromCustomerEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public SoftDeleteCustomer_SoftDelete_Data_Customer_Customer Map(global::ConnectiqApiNS.State.CustomerEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new SoftDeleteCustomer_SoftDelete_Data_Customer_Customer(entity.CalculateSize, entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class UpdateCustomer_UpdateCustomer_Data_Customer_CustomerFromCustomerEntityMapper : global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, UpdateCustomer_UpdateCustomer_Data_Customer_Customer>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateCustomer_UpdateCustomer_Data_Customer_CustomerFromCustomerEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public UpdateCustomer_UpdateCustomer_Data_Customer_Customer Map(global::ConnectiqApiNS.State.CustomerEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new UpdateCustomer_UpdateCustomer_Data_Customer_Customer(entity.CalculateSize, entity.Id, MapIUpdateCustomer_UpdateCustomer_Data_Customer_Details(entity.Details, snapshot));
        }

        private global::ConnectiqApiNS.IUpdateCustomer_UpdateCustomer_Data_Customer_Details? MapIUpdateCustomer_UpdateCustomer_Data_Customer_Details(global::ConnectiqApiNS.State.CustomerDetailsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUpdateCustomer_UpdateCustomer_Data_Customer_Details returnValue = default !;
            if (data?.__typename.Equals("CustomerDetails", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UpdateCustomer_UpdateCustomer_Data_Customer_Details_CustomerDetails(data.Address, data.CalculateSize ?? throw new global::System.ArgumentNullException(), data.Email, data.Name, data.Phone);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetAllCustomers_AllCustomers_Data_Customers_Customer_CustomerFromCustomerEntityMapper : global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, GetAllCustomers_AllCustomers_Data_Customers_Customer_Customer>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAllCustomers_AllCustomers_Data_Customers_Customer_CustomerFromCustomerEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetAllCustomers_AllCustomers_Data_Customers_Customer_Customer Map(global::ConnectiqApiNS.State.CustomerEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetAllCustomers_AllCustomers_Data_Customers_Customer_Customer(entity.CalculateSize, entity.Id, MapIGetAllCustomers_AllCustomers_Data_Customers_Customer_Details(entity.Details, snapshot));
        }

        private global::ConnectiqApiNS.IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details? MapIGetAllCustomers_AllCustomers_Data_Customers_Customer_Details(global::ConnectiqApiNS.State.CustomerDetailsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllCustomers_AllCustomers_Data_Customers_Customer_Details returnValue = default !;
            if (data?.__typename.Equals("CustomerDetails", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllCustomers_AllCustomers_Data_Customers_Customer_Details_CustomerDetails(data.Address, data.CalculateSize ?? throw new global::System.ArgumentNullException(), data.Email, data.Name, data.Phone);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class GetCustomerById_CustomerById_Data_CustomerDto_Customer_CustomerFromCustomerEntityMapper : global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, GetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCustomerById_CustomerById_Data_CustomerDto_Customer_CustomerFromCustomerEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer Map(global::ConnectiqApiNS.State.CustomerEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer(entity.CalculateSize, entity.Id, MapIGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details(entity.Details, snapshot));
        }

        private global::ConnectiqApiNS.IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details? MapIGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details(global::ConnectiqApiNS.State.CustomerDetailsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomerById_CustomerById_Data_CustomerDto_Customer_Details returnValue = default !;
            if (data?.__typename.Equals("CustomerDetails", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomerById_CustomerById_Data_CustomerDto_Customer_Details_CustomerDetails(data.Address, data.CalculateSize ?? throw new global::System.ArgumentNullException(), data.Email, data.Name, data.Phone);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class ConnectiqApiEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Customer" => ParseCustomerEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Customer" => FormatCustomerEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseCustomerEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCustomerEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public partial class ConnectiqApiStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ConnectiqApiStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.6.0")]
    public static partial class ConnectiqApiServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::ConnectiqApiNS.State.ConnectiqApiStoreAccessor> AddConnectiqApi(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::ConnectiqApiNS.State.ConnectiqApiStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.CreateCustomerMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.SoftDeleteCustomerMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.UpdateCustomerMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.GetAllCustomersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.GetCustomerByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.ConnectiqApi>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.IConnectiqApi>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::ConnectiqApiNS.State.ConnectiqApiStoreAccessor>("ConnectiqApi", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ConnectiqApi"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, global::ConnectiqApiNS.CreateCustomer_CreateCustomer_Data_Customer_Customer>, global::ConnectiqApiNS.State.CreateCustomer_CreateCustomer_Data_Customer_CustomerFromCustomerEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, global::ConnectiqApiNS.SoftDeleteCustomer_SoftDelete_Data_Customer_Customer>, global::ConnectiqApiNS.State.SoftDeleteCustomer_SoftDelete_Data_Customer_CustomerFromCustomerEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, global::ConnectiqApiNS.UpdateCustomer_UpdateCustomer_Data_Customer_Customer>, global::ConnectiqApiNS.State.UpdateCustomer_UpdateCustomer_Data_Customer_CustomerFromCustomerEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, global::ConnectiqApiNS.GetAllCustomers_AllCustomers_Data_Customers_Customer_Customer>, global::ConnectiqApiNS.State.GetAllCustomers_AllCustomers_Data_Customers_Customer_CustomerFromCustomerEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ConnectiqApiNS.State.CustomerEntity, global::ConnectiqApiNS.GetCustomerById_CustomerById_Data_CustomerDto_Customer_Customer>, global::ConnectiqApiNS.State.GetCustomerById_CustomerById_Data_CustomerDto_Customer_CustomerFromCustomerEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ConnectiqApiNS.HttpStatusCodeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ConnectiqApiNS.SeveritySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ConnectiqApiNS.CreateCustomerInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ConnectiqApiNS.CustomerDetailsInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ConnectiqApiNS.SoftDeleteCustomerInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ConnectiqApiNS.UpdateCustomerInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ConnectiqApiNS.CustomerInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ConnectiqApiNS.GetAllFiltersInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ConnectiqApiNS.CustomerFiltersInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.ICreateCustomerResult>, global::ConnectiqApiNS.State.CreateCustomerResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.ICreateCustomerResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.ICreateCustomerMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.ICreateCustomerResult>, global::ConnectiqApiNS.State.CreateCustomerBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ConnectiqApiNS.ICreateCustomerResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.ICreateCustomerResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.ICreateCustomerResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConnectiqApiNS.CreateCustomerMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConnectiqApiNS.ICreateCustomerMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.CreateCustomerMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.ISoftDeleteCustomerResult>, global::ConnectiqApiNS.State.SoftDeleteCustomerResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.ISoftDeleteCustomerResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.ISoftDeleteCustomerMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.ISoftDeleteCustomerResult>, global::ConnectiqApiNS.State.SoftDeleteCustomerBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ConnectiqApiNS.ISoftDeleteCustomerResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.ISoftDeleteCustomerResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.ISoftDeleteCustomerResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConnectiqApiNS.SoftDeleteCustomerMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConnectiqApiNS.ISoftDeleteCustomerMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.SoftDeleteCustomerMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.IUpdateCustomerResult>, global::ConnectiqApiNS.State.UpdateCustomerResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.IUpdateCustomerResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.IUpdateCustomerMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.IUpdateCustomerResult>, global::ConnectiqApiNS.State.UpdateCustomerBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ConnectiqApiNS.IUpdateCustomerResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.IUpdateCustomerResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.IUpdateCustomerResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConnectiqApiNS.UpdateCustomerMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConnectiqApiNS.IUpdateCustomerMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.UpdateCustomerMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.IGetAllCustomersResult>, global::ConnectiqApiNS.State.GetAllCustomersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.IGetAllCustomersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.IGetAllCustomersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.IGetAllCustomersResult>, global::ConnectiqApiNS.State.GetAllCustomersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ConnectiqApiNS.IGetAllCustomersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.IGetAllCustomersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.IGetAllCustomersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConnectiqApiNS.GetAllCustomersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConnectiqApiNS.IGetAllCustomersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.GetAllCustomersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.IGetCustomerByIdResult>, global::ConnectiqApiNS.State.GetCustomerByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ConnectiqApiNS.IGetCustomerByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.IGetCustomerByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.IGetCustomerByIdResult>, global::ConnectiqApiNS.State.GetCustomerByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ConnectiqApiNS.IGetCustomerByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.IGetCustomerByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConnectiqApiNS.IGetCustomerByIdResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConnectiqApiNS.GetCustomerByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConnectiqApiNS.IGetCustomerByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.GetCustomerByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::ConnectiqApiNS.State.ConnectiqApiEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConnectiqApiNS.ConnectiqApi>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConnectiqApiNS.IConnectiqApi>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConnectiqApiNS.ConnectiqApi>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
